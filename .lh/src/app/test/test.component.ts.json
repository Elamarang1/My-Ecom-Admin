{
    "sourceFile": "src/app/test/test.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 63,
            "patches": [
                {
                    "date": 1749784341955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749784354993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n-import { FormGroup, FormBuilder, FormArray, FormControl } from '@angular/forms';\r\n+import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [],\r\n+  imports: [ReactiveFormsModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent  {\r\n"
                },
                {
                    "date": 1749784415063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n+import { NgFor } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule],\r\n+  imports: [ReactiveFormsModule,NgFor],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent  {\r\n"
                },
                {
                    "date": 1749784541791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,12 @@\n       variant_id: this.fb.array([]),\r\n     });\r\n     this.images.push(imageGroup);\r\n   }\r\n+getVariantIdControls(imageIndex: number): FormControl[] {\r\n+  const formArray = this.images.at(imageIndex).get('variant_id') as FormArray;\r\n+  return formArray.controls as FormControl[];\r\n+}\r\n \r\n   // --------- Add Variant ID to Image ---------\r\n   addVariantIdToImage(imageIndex: number) {\r\n     const variantIdArray = this.images.at(imageIndex).get('variant_id') as FormArray;\r\n"
                },
                {
                    "date": 1749877218135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { NgFor } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n-import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule } from '@angular/forms';\r\n+import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n@@ -11,67 +11,87 @@\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent  {\r\n   productForm: FormGroup;\r\n+  uploadedImages: any[] = [];\r\n \r\n   constructor(private fb: FormBuilder, private http: HttpClient) {\r\n     this.productForm = this.fb.group({\r\n+      product_name: ['', Validators.required],\r\n       variants: this.fb.array([]),\r\n       images: this.fb.array([]),\r\n     });\r\n   }\r\n \r\n-  // --------- Form Array Getters ---------\r\n   get variants(): FormArray {\r\n     return this.productForm.get('variants') as FormArray;\r\n   }\r\n \r\n   get images(): FormArray {\r\n     return this.productForm.get('images') as FormArray;\r\n   }\r\n \r\n-  // --------- Add Variant ---------\r\n   addVariant() {\r\n-    const variantGroup = this.fb.group({\r\n-      variant_id: [0],\r\n-      id: [0],\r\n+    this.variants.push(this.fb.group({\r\n       sku: [''],\r\n       size: [''],\r\n       color: [''],\r\n-      image_id: [0],\r\n-    });\r\n-    this.variants.push(variantGroup);\r\n+      image_id: ['']  // image_id will be selected from uploaded list\r\n+    }));\r\n   }\r\n \r\n-  // --------- Add Image ---------\r\n-  addImage() {\r\n-    const imageGroup = this.fb.group({\r\n-      image_id: [0],\r\n-      id: [0],\r\n-      alt: [''],\r\n-      src: [''],\r\n-      variant_id: this.fb.array([]),\r\n+  removeVariant(index: number) {\r\n+    this.variants.removeAt(index);\r\n+  }\r\n+\r\n+  onFileUpload(event: any) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    const formData = new FormData();\r\n+    formData.append('image', file);\r\n+\r\n+    this.http.post('http://your-api/images/upload', formData).subscribe((res: any) => {\r\n+      if (res.Status === 'Success') {\r\n+        const uploaded = {\r\n+          image_id: res.image_id,\r\n+          alt: file.name,\r\n+          src: res.src,\r\n+          variant_id: []\r\n+        };\r\n+\r\n+        this.uploadedImages.push(uploaded);\r\n+        this.images.push(this.fb.group({\r\n+          image_id: [res.image_id],\r\n+          alt: [file.name],\r\n+          src: [res.src],\r\n+          variant_id: [''] // Fill in later with variant IDs\r\n+        }));\r\n+      }\r\n     });\r\n-    this.images.push(imageGroup);\r\n   }\r\n-getVariantIdControls(imageIndex: number): FormControl[] {\r\n-  const formArray = this.images.at(imageIndex).get('variant_id') as FormArray;\r\n-  return formArray.controls as FormControl[];\r\n-}\r\n \r\n-  // --------- Add Variant ID to Image ---------\r\n-  addVariantIdToImage(imageIndex: number) {\r\n-    const variantIdArray = this.images.at(imageIndex).get('variant_id') as FormArray;\r\n-    variantIdArray.push(new FormControl(0)); // add default 0 or user value\r\n+  removeImage(index: number) {\r\n+    this.images.removeAt(index);\r\n+    this.uploadedImages.splice(index, 1);\r\n   }\r\n \r\n-  // --------- Submit Form ---------\r\n-  submit() {\r\n-    const formData = this.productForm.value;\r\n+  onSubmit() {\r\n+    const formValue = this.productForm.value;\r\n \r\n-    this.http.post('https://your-backend-api.com/api/products', formData)\r\n-      .subscribe({\r\n-        next: (res) => console.log('Submitted successfully', res),\r\n-        error: (err) => console.error('Submission error', err),\r\n-      });\r\n+    // Convert variant_id to array in images\r\n+    const processedImages = formValue.images.map((img: any) => ({\r\n+      ...img,\r\n+      variant_id: img.variant_id.split(',').map((v: string) => parseInt(v.trim()))\r\n+    }));\r\n+\r\n+    const payload = {\r\n+      product_name: formValue.product_name,\r\n+      variants: formValue.variants,\r\n+      images: processedImages\r\n+    };\r\n+\r\n+    this.http.post('http://your-api/products/create', payload).subscribe(res => {\r\n+      console.log('Product Created', res);\r\n+    });\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749877621809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent  {\r\n   productForm: FormGroup;\r\n-  uploadedImages: any[] = [];\r\n+  nextImageId = 211;  // Starting for fake ID generation\r\n+  nextVariantId = 201;\r\n \r\n   constructor(private fb: FormBuilder, private http: HttpClient) {\r\n     this.productForm = this.fb.group({\r\n       product_name: ['', Validators.required],\r\n@@ -30,68 +31,86 @@\n     return this.productForm.get('images') as FormArray;\r\n   }\r\n \r\n   addVariant() {\r\n-    this.variants.push(this.fb.group({\r\n+    const newVariant = this.fb.group({\r\n+      variant_id: [this.nextVariantId++],\r\n       sku: [''],\r\n       size: [''],\r\n       color: [''],\r\n-      image_id: ['']  // image_id will be selected from uploaded list\r\n-    }));\r\n+      image_id: [''] // will map to uploaded image\r\n+    });\r\n+    this.variants.push(newVariant);\r\n   }\r\n \r\n   removeVariant(index: number) {\r\n+    const removedVariantId = this.variants.at(index).value.variant_id;\r\n     this.variants.removeAt(index);\r\n+\r\n+    // Remove from all images.variant_id[]\r\n+    this.images.controls.forEach(img => {\r\n+      let list = img.value.variant_id || [];\r\n+      list = list.filter((id: number) => id !== removedVariantId);\r\n+      img.patchValue({ variant_id: list });\r\n+    });\r\n   }\r\n \r\n   onFileUpload(event: any) {\r\n     const file = event.target.files[0];\r\n     if (!file) return;\r\n \r\n+    // Upload the file via API\r\n     const formData = new FormData();\r\n     formData.append('image', file);\r\n \r\n-    this.http.post('http://your-api/images/upload', formData).subscribe((res: any) => {\r\n-      if (res.Status === 'Success') {\r\n-        const uploaded = {\r\n-          image_id: res.image_id,\r\n-          alt: file.name,\r\n-          src: res.src,\r\n-          variant_id: []\r\n-        };\r\n-\r\n-        this.uploadedImages.push(uploaded);\r\n-        this.images.push(this.fb.group({\r\n-          image_id: [res.image_id],\r\n-          alt: [file.name],\r\n-          src: [res.src],\r\n-          variant_id: [''] // Fill in later with variant IDs\r\n-        }));\r\n-      }\r\n+    this.http.post<any>('http://your-api.com/image/upload', formData).subscribe(res => {\r\n+      const image_id = this.nextImageId++; // simulate\r\n+      this.images.push(this.fb.group({\r\n+        image_id: [image_id],\r\n+        alt: [file.name],\r\n+        src: [res.src || 'assets/temp/' + file.name], // use real uploaded path\r\n+        variant_id: [[]]\r\n+      }));\r\n     });\r\n   }\r\n \r\n   removeImage(index: number) {\r\n     this.images.removeAt(index);\r\n-    this.uploadedImages.splice(index, 1);\r\n   }\r\n \r\n+  onImageSelect(variantIndex: number, selectedImageId: any) {\r\n+    const variant = this.variants.at(variantIndex);\r\n+    variant.patchValue({ image_id: selectedImageId.target.value });\r\n+\r\n+    const variantId = variant.value.variant_id;\r\n+\r\n+    // Update the selected image's variant_id array\r\n+    this.images.controls.forEach(imageGroup => {\r\n+      const current = imageGroup.value;\r\n+      const list: number[] = current.variant_id || [];\r\n+\r\n+      if (current.image_id === selectedImageId.target.value) {\r\n+        if (!list.includes(variantId)) list.push(variantId);\r\n+        imageGroup.patchValue({ variant_id: list });\r\n+      } else {\r\n+        const updated = list.filter(v => v !== variantId);\r\n+        imageGroup.patchValue({ variant_id: updated });\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n   onSubmit() {\r\n     const formValue = this.productForm.value;\r\n \r\n-    // Convert variant_id to array in images\r\n-    const processedImages = formValue.images.map((img: any) => ({\r\n-      ...img,\r\n-      variant_id: img.variant_id.split(',').map((v: string) => parseInt(v.trim()))\r\n-    }));\r\n-\r\n-    const payload = {\r\n+    const finalPayload = {\r\n       product_name: formValue.product_name,\r\n       variants: formValue.variants,\r\n-      images: processedImages\r\n+      images: formValue.images\r\n     };\r\n \r\n-    this.http.post('http://your-api/products/create', payload).subscribe(res => {\r\n-      console.log('Product Created', res);\r\n+    console.log('Final Payload', finalPayload);\r\n+\r\n+    this.http.post('http://your-api.com/product/create', finalPayload).subscribe(res => {\r\n+      console.log('Created', res);\r\n     });\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749878986747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,108 +9,79 @@\n   imports: [ReactiveFormsModule,NgFor],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n-export class TestComponent  {\r\n+export class TestComponent{\r\n   productForm: FormGroup;\r\n-  nextImageId = 211;  // Starting for fake ID generation\r\n-  nextVariantId = 201;\r\n \r\n-  constructor(private fb: FormBuilder, private http: HttpClient) {\r\n+  constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n-      product_name: ['', Validators.required],\r\n-      variants: this.fb.array([]),\r\n-      images: this.fb.array([]),\r\n+      images: this.fb.array([])\r\n     });\r\n+    this.addImage(); // Start with one image block\r\n   }\r\n \r\n-  get variants(): FormArray {\r\n-    return this.productForm.get('variants') as FormArray;\r\n-  }\r\n-\r\n   get images(): FormArray {\r\n     return this.productForm.get('images') as FormArray;\r\n   }\r\n \r\n-  addVariant() {\r\n-    const newVariant = this.fb.group({\r\n-      variant_id: [this.nextVariantId++],\r\n-      sku: [''],\r\n-      size: [''],\r\n-      color: [''],\r\n-      image_id: [''] // will map to uploaded image\r\n+  newImage(): FormGroup {\r\n+    return this.fb.group({\r\n+      alt: ['', Validators.required],\r\n+      src: ['', Validators.required], // Will store base64\r\n+      preview: [''], // for UI preview\r\n+      variantDetails: this.fb.array([this.newVariant()])\r\n     });\r\n-    this.variants.push(newVariant);\r\n   }\r\n \r\n-  removeVariant(index: number) {\r\n-    const removedVariantId = this.variants.at(index).value.variant_id;\r\n-    this.variants.removeAt(index);\r\n-\r\n-    // Remove from all images.variant_id[]\r\n-    this.images.controls.forEach(img => {\r\n-      let list = img.value.variant_id || [];\r\n-      list = list.filter((id: number) => id !== removedVariantId);\r\n-      img.patchValue({ variant_id: list });\r\n+  newVariant(): FormGroup {\r\n+    return this.fb.group({\r\n+      sku: ['', Validators.required],\r\n+      size: ['', Validators.required],\r\n+      color: ['', Validators.required]\r\n     });\r\n   }\r\n \r\n-  onFileUpload(event: any) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) return;\r\n-\r\n-    // Upload the file via API\r\n-    const formData = new FormData();\r\n-    formData.append('image', file);\r\n-\r\n-    this.http.post<any>('http://your-api.com/image/upload', formData).subscribe(res => {\r\n-      const image_id = this.nextImageId++; // simulate\r\n-      this.images.push(this.fb.group({\r\n-        image_id: [image_id],\r\n-        alt: [file.name],\r\n-        src: [res.src || 'assets/temp/' + file.name], // use real uploaded path\r\n-        variant_id: [[]]\r\n-      }));\r\n-    });\r\n+  addImage() {\r\n+    this.images.push(this.newImage());\r\n   }\r\n \r\n   removeImage(index: number) {\r\n     this.images.removeAt(index);\r\n   }\r\n \r\n-  onImageSelect(variantIndex: number, selectedImageId: any) {\r\n-    const variant = this.variants.at(variantIndex);\r\n-    variant.patchValue({ image_id: selectedImageId.target.value });\r\n+  variantDetails(imageIndex: number): FormArray {\r\n+    return this.images.at(imageIndex).get('variantDetails') as FormArray;\r\n+  }\r\n \r\n-    const variantId = variant.value.variant_id;\r\n+  addVariant(imageIndex: number) {\r\n+    this.variantDetails(imageIndex).push(this.newVariant());\r\n+  }\r\n \r\n-    // Update the selected image's variant_id array\r\n-    this.images.controls.forEach(imageGroup => {\r\n-      const current = imageGroup.value;\r\n-      const list: number[] = current.variant_id || [];\r\n+  removeVariant(imageIndex: number, variantIndex: number) {\r\n+    this.variantDetails(imageIndex).removeAt(variantIndex);\r\n+  }\r\n \r\n-      if (current.image_id === selectedImageId.target.value) {\r\n-        if (!list.includes(variantId)) list.push(variantId);\r\n-        imageGroup.patchValue({ variant_id: list });\r\n-      } else {\r\n-        const updated = list.filter(v => v !== variantId);\r\n-        imageGroup.patchValue({ variant_id: updated });\r\n-      }\r\n+  async onFileChange(event: any, imageIndex: number) {\r\n+    const file = event.target.files[0];\r\n+    if (file) {\r\n+      const base64 = await this.convertToBase64(file);\r\n+      this.images.at(imageIndex).patchValue({ src: base64, preview: base64 });\r\n+    }\r\n+  }\r\n+\r\n+  convertToBase64(file: File): Promise<string> {\r\n+    return new Promise((resolve, reject) => {\r\n+      const reader = new FileReader();\r\n+      reader.readAsDataURL(file);\r\n+      reader.onload = () => resolve(reader.result as string);\r\n+      reader.onerror = error => reject(error);\r\n     });\r\n   }\r\n \r\n   onSubmit() {\r\n-    const formValue = this.productForm.value;\r\n-\r\n-    const finalPayload = {\r\n-      product_name: formValue.product_name,\r\n-      variants: formValue.variants,\r\n-      images: formValue.images\r\n-    };\r\n-\r\n-    console.log('Final Payload', finalPayload);\r\n-\r\n-    this.http.post('http://your-api.com/product/create', finalPayload).subscribe(res => {\r\n-      console.log('Created', res);\r\n-    });\r\n+    const data = this.productForm.value;\r\n+    // Optionally remove preview field before sending to backend\r\n+    data.images.forEach((img: any) => delete img.preview);\r\n+    console.log('Submitted:', data);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749879226060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,28 +9,28 @@\n   imports: [ReactiveFormsModule,NgFor],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n-export class TestComponent{\r\n+export class TestComponent {\r\n   productForm: FormGroup;\r\n \r\n   constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n-      images: this.fb.array([])\r\n+      'images Details': this.fb.array([]) // Note: key with space\r\n     });\r\n-    this.addImage(); // Start with one image block\r\n+    this.addImage(); // One initial image\r\n   }\r\n \r\n-  get images(): FormArray {\r\n-    return this.productForm.get('images') as FormArray;\r\n+  get imageDetails(): FormArray {\r\n+    return this.productForm.get('images Details') as FormArray;\r\n   }\r\n \r\n   newImage(): FormGroup {\r\n     return this.fb.group({\r\n       alt: ['', Validators.required],\r\n-      src: ['', Validators.required], // Will store base64\r\n-      preview: [''], // for UI preview\r\n-      variantDetails: this.fb.array([this.newVariant()])\r\n+      src: ['', Validators.required], // base64 string\r\n+      preview: [''], // for image preview (not submitted)\r\n+      'variant Details': this.fb.array([this.newVariant()])\r\n     });\r\n   }\r\n \r\n   newVariant(): FormGroup {\r\n@@ -41,32 +41,33 @@\n     });\r\n   }\r\n \r\n   addImage() {\r\n-    this.images.push(this.newImage());\r\n+    this.imageDetails.push(this.newImage());\r\n   }\r\n \r\n   removeImage(index: number) {\r\n-    this.images.removeAt(index);\r\n+    this.imageDetails.removeAt(index);\r\n   }\r\n \r\n-  variantDetails(imageIndex: number): FormArray {\r\n-    return this.images.at(imageIndex).get('variantDetails') as FormArray;\r\n+  getVariants(imageIndex: number): FormArray {\r\n+    return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n   }\r\n \r\n   addVariant(imageIndex: number) {\r\n-    this.variantDetails(imageIndex).push(this.newVariant());\r\n+    this.getVariants(imageIndex).push(this.newVariant());\r\n   }\r\n \r\n   removeVariant(imageIndex: number, variantIndex: number) {\r\n-    this.variantDetails(imageIndex).removeAt(variantIndex);\r\n+    this.getVariants(imageIndex).removeAt(variantIndex);\r\n   }\r\n \r\n   async onFileChange(event: any, imageIndex: number) {\r\n     const file = event.target.files[0];\r\n     if (file) {\r\n       const base64 = await this.convertToBase64(file);\r\n-      this.images.at(imageIndex).patchValue({ src: base64, preview: base64 });\r\n+      const group = this.imageDetails.at(imageIndex);\r\n+      group.patchValue({ src: base64, preview: base64 });\r\n     }\r\n   }\r\n \r\n   convertToBase64(file: File): Promise<string> {\r\n@@ -78,10 +79,11 @@\n     });\r\n   }\r\n \r\n   onSubmit() {\r\n-    const data = this.productForm.value;\r\n-    // Optionally remove preview field before sending to backend\r\n-    data.images.forEach((img: any) => delete img.preview);\r\n-    console.log('Submitted:', data);\r\n+    const data = JSON.parse(JSON.stringify(this.productForm.value));\r\n+    // remove preview field before submit\r\n+    data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n+    console.log('Final Payload:', data);\r\n+    // You can now POST this to API\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749983776546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,5 +85,6 @@\n     data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n     console.log('Final Payload:', data);\r\n     // You can now POST this to API\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n+\r\n"
                },
                {
                    "date": 1749983913860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import { NgFor } from '@angular/common';\r\n+import { NgFor, NgIf } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,NgFor],\r\n+  imports: [ReactiveFormsModule,NgFor,NgIf],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749984867983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import { NgFor, NgIf } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-\r\n+import {MatTabsModule} from '@angular/material/tabs';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,NgFor,NgIf],\r\n+  imports: [ReactiveFormsModule,NgFor,NgIf,MatTabsModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749984998285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n import {MatTabsModule} from '@angular/material/tabs';\r\n+import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,NgFor,NgIf,MatTabsModule],\r\n+  imports: [ReactiveFormsModule, NgFor, NgIf, MatTabsModule, AddProductComponent],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986216462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,13 @@\n import { Component } from '@angular/core';\r\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n import {MatTabsModule} from '@angular/material/tabs';\r\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n+import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule, NgFor, NgIf, MatTabsModule, AddProductComponent],\r\n+  imports: [ReactiveFormsModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986295026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,13 @@\n import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n import {MatTabsModule} from '@angular/material/tabs';\r\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n+import { MatCardModule } from '@angular/material/card';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n+  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule, mat],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986321043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { MatCardModule } from '@angular/material/card';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule, mat],\r\n+  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986359477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import {MatTabsModule} from '@angular/material/tabs';\r\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n+import { MatFormFieldModule } from '@angular/material/form-field';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n   imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n"
                },
                {
                    "date": 1749986375678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n+  imports: [ReactiveFormsModule,MatCardModule,MatFormFieldModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986609842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n import {MatTabsModule} from '@angular/material/tabs';\r\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n-import { MatFormFieldModule } from '@angular/material/form-field';\r\n+\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,MatCardModule,MatFormFieldModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n+  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1749986641914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,16 @@\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n \r\n+import { MatFormFieldModule } from '@angular/material/form-field';\r\n+import { MatInputModule } from '@angular/material/input';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n+\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,MatCardModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n+  imports: [ReactiveFormsModule,MatCardModule,MatButtonModule,MatInputModule,MatFormFieldModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n"
                },
                {
                    "date": 1750001816746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,18 @@\n   styleUrl: './test.component.scss'\r\n })\r\n export class TestComponent {\r\n   productForm: FormGroup;\r\n+  imageUrl: any = [\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+  ];\r\n+    productForm1!: FormGroup;\r\n \r\n+  options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n+  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n   constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n       'images Details': this.fb.array([]) // Note: key with space\r\n     });\r\n"
                },
                {
                    "date": 1750001843737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,57 @@\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n   ];\r\n+\r\n+    typeArray = [\r\n+    { key: 'Fashion', value: 'fashion' },\r\n+    { key: 'Shoes', value: 'shoes' },\r\n+    { key: 'Bags', value: 'bags' },\r\n+    { key: 'Watch', value: 'watch' },\r\n+    { key: 'Flower', value: 'flower' },\r\n+    { key: 'Pets', value: 'pets' },\r\n+    { key: 'Electronics', value: 'electronics' },\r\n+    { key: 'Vegetables', value: 'vegetables' },\r\n+    { key: 'Furniture', value: 'furniture' },\r\n+    { key: 'Beauty', value: 'beauty' },\r\n+    { key: 'Tools', value: 'tools' },\r\n+    { key: 'Gym', value: 'gym' },\r\n+    { key: 'Marijuana', value: 'marijuana' },\r\n+  ];\r\n+\r\n+  brandArray = [\r\n+    { key: 'Nike', value: 'nike' },\r\n+    { key: 'Zara', value: 'zara' },\r\n+    { key: 'Denim', value: 'denim' },\r\n+    { key: 'Madame', value: 'madame' },\r\n+    { key: 'Biba', value: 'biba' },\r\n+    { key: 'Max', value: 'max' },\r\n+  ];\r\n+\r\n+  collectionArray = [\r\n+    { key: 'New products', value: 'new products' },\r\n+    { key: 'Best sellers', value: 'best sellers' },\r\n+    { key: 'Featured products', value: 'featured products' },\r\n+    { key: 'On sale', value: 'on sale' },\r\n+    { key: 'New arrival', value: 'new arrival' },\r\n+    { key: 'Trending product', value: 'trending product' },\r\n+  ];\r\n+  categoryArray = [\r\n+    { key: 'Fashion', value: 'Women' },\r\n+    { key: 'Shoes', value: 'shoes' },\r\n+    { key: 'Bags', value: 'bags' },\r\n+    { key: 'Watch', value: 'watch' },\r\n+    { key: 'Flower', value: 'flower' },\r\n+    { key: 'Pets', value: 'pets' },\r\n+    { key: 'Electronics', value: 'electronics' },\r\n+    { key: 'Vegetables', value: 'vegetables' },\r\n+    { key: 'Furniture', value: 'furniture' },\r\n+    { key: 'Beauty', value: 'beauty' },\r\n+    { key: 'Tools', value: 'tools' },\r\n+    { key: 'Gym', value: 'gym' },\r\n+    { key: 'Marijuana', value: 'marijuana' },\r\n+  ];\r\n     productForm1!: FormGroup;\r\n \r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n"
                },
                {
                    "date": 1750001856954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,6 +151,16 @@\n     data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n     console.log('Final Payload:', data);\r\n     // You can now POST this to API\r\n   }\r\n+    jsonTest() {\r\n+    if (this.productForm1.valid) {\r\n+      const formData = this.productForm1.value;\r\n+\r\n+      formData.sale = true;\r\n+      console.log('Form Data:', this.productForm1.value);\r\n+    } else {\r\n+      this.productForm1.markAllAsTouched();\r\n+    }\r\n+  }\r\n }\r\n \r\n"
                },
                {
                    "date": 1750001971731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,52 @@\n import { NgFor, NgIf } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component } from '@angular/core';\r\n-import { FormGroup, FormBuilder, FormArray, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-import {MatTabsModule} from '@angular/material/tabs';\r\n-import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n+import {\r\n+  FormGroup,\r\n+  FormBuilder,\r\n+  FormArray,\r\n+  FormControl,\r\n+  ReactiveFormsModule,\r\n+  Validators,\r\n+} from '@angular/forms';\r\n+import { MatTabsModule } from '@angular/material/tabs';\r\n+import { AddProductComponent } from '../COMPONENTS/add-product/add-product.component';\r\n import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n \r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatButtonModule } from '@angular/material/button';\r\n+import { MatExpansionModule } from '@angular/material/expansion';\r\n+import { MatChipsModule } from '@angular/material/chips';\r\n+import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n+import { MatSelectModule } from '@angular/material/select';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [ReactiveFormsModule,MatCardModule,MatButtonModule,MatInputModule,MatFormFieldModule, NgFor, NgIf, MatTabsModule, AddProductComponent, MatIconModule],\r\n+  imports: [\r\n+    ReactiveFormsModule,\r\n+    MatCardModule,\r\n+    MatButtonModule,\r\n+    MatInputModule,\r\n+    MatFormFieldModule,\r\n+    NgFor,\r\n+    NgIf,\r\n+    MatTabsModule,\r\n+    AddProductComponent,\r\n+    MatIconModule,\r\n+    MatSelectModule,\r\n+    MatAutocompleteModule,\r\n+    MatChipsModule,\r\n+    MatExpansionModule\r\n+  ],\r\n+\r\n+\r\n+\r\n   templateUrl: './test.component.html',\r\n-  styleUrl: './test.component.scss'\r\n+  styleUrl: './test.component.scss',\r\n })\r\n export class TestComponent {\r\n   productForm: FormGroup;\r\n   imageUrl: any = [\r\n@@ -26,9 +55,9 @@\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n   ];\r\n \r\n-    typeArray = [\r\n+  typeArray = [\r\n     { key: 'Fashion', value: 'fashion' },\r\n     { key: 'Shoes', value: 'shoes' },\r\n     { key: 'Bags', value: 'bags' },\r\n     { key: 'Watch', value: 'watch' },\r\n@@ -74,15 +103,15 @@\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n   ];\r\n-    productForm1!: FormGroup;\r\n+  productForm1!: FormGroup;\r\n \r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n   constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n-      'images Details': this.fb.array([]) // Note: key with space\r\n+      'images Details': this.fb.array([]), // Note: key with space\r\n     });\r\n     this.addImage(); // One initial image\r\n   }\r\n \r\n@@ -94,17 +123,17 @@\n     return this.fb.group({\r\n       alt: ['', Validators.required],\r\n       src: ['', Validators.required], // base64 string\r\n       preview: [''], // for image preview (not submitted)\r\n-      'variant Details': this.fb.array([this.newVariant()])\r\n+      'variant Details': this.fb.array([this.newVariant()]),\r\n     });\r\n   }\r\n \r\n   newVariant(): FormGroup {\r\n     return this.fb.group({\r\n       sku: ['', Validators.required],\r\n       size: ['', Validators.required],\r\n-      color: ['', Validators.required]\r\n+      color: ['', Validators.required],\r\n     });\r\n   }\r\n \r\n   addImage() {\r\n@@ -140,20 +169,20 @@\n     return new Promise((resolve, reject) => {\r\n       const reader = new FileReader();\r\n       reader.readAsDataURL(file);\r\n       reader.onload = () => resolve(reader.result as string);\r\n-      reader.onerror = error => reject(error);\r\n+      reader.onerror = (error) => reject(error);\r\n     });\r\n   }\r\n \r\n   onSubmit() {\r\n     const data = JSON.parse(JSON.stringify(this.productForm.value));\r\n     // remove preview field before submit\r\n-    data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n+    data['images Details'].forEach((img: any) => delete img.preview);\r\n     console.log('Final Payload:', data);\r\n     // You can now POST this to API\r\n   }\r\n-    jsonTest() {\r\n+  jsonTest() {\r\n     if (this.productForm1.valid) {\r\n       const formData = this.productForm1.value;\r\n \r\n       formData.sale = true;\r\n@@ -162,5 +191,4 @@\n       this.productForm1.markAllAsTouched();\r\n     }\r\n   }\r\n }\r\n-\r\n"
                },
                {
                    "date": 1750002062026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,20 @@\n   constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n       'images Details': this.fb.array([]), // Note: key with space\r\n     });\r\n+        this.productForm1 = this.fb.group({\r\n+      title: ['', Validators.required],\r\n+      description: [''],\r\n+      type: [''],\r\n+      brand: [''],\r\n+      collection: [[]],\r\n+      category: [''],\r\n+      price: [''],\r\n+      discount: [''],\r\n+      stock: [''],\r\n+      newProduct: [false],\r\n+    });\r\n     this.addImage(); // One initial image\r\n   }\r\n \r\n   get imageDetails(): FormArray {\r\n"
                },
                {
                    "date": 1750002621315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import { MatExpansionModule } from '@angular/material/expansion';\r\n import { MatChipsModule } from '@angular/material/chips';\r\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n import { MatSelectModule } from '@angular/material/select';\r\n-\r\n+import { MatDividerModule } from '@angular/material/divider';\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n   imports: [\r\n@@ -38,9 +38,10 @@\n     MatIconModule,\r\n     MatSelectModule,\r\n     MatAutocompleteModule,\r\n     MatChipsModule,\r\n-    MatExpansionModule\r\n+    MatExpansionModule,\r\n+    \r\n   ],\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1750002628969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n   imports: [\r\n+    MatDividerModule,\r\n     ReactiveFormsModule,\r\n     MatCardModule,\r\n     MatButtonModule,\r\n     MatInputModule,\r\n"
                },
                {
                    "date": 1750087564964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,51 @@\n-import { NgFor, NgIf } from '@angular/common';\r\n-import { HttpClient } from '@angular/common/http';\r\n-import { Component } from '@angular/core';\r\n+import { Component, ViewChild } from '@angular/core';\r\n import {\r\n   FormGroup,\r\n   FormBuilder,\r\n   FormArray,\r\n-  FormControl,\r\n+  Validators,\r\n   ReactiveFormsModule,\r\n-  Validators,\r\n } from '@angular/forms';\r\n-import { MatTabsModule } from '@angular/material/tabs';\r\n-import { AddProductComponent } from '../COMPONENTS/add-product/add-product.component';\r\n-import { MatIcon, MatIconModule } from '@angular/material/icon';\r\n+import { NgFor, NgIf } from '@angular/common';\r\n+import { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\r\n+import { MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n-\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatButtonModule } from '@angular/material/button';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n import { MatChipsModule } from '@angular/material/chips';\r\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatDividerModule } from '@angular/material/divider';\r\n+\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n   imports: [\r\n-    MatDividerModule,\r\n     ReactiveFormsModule,\r\n-    MatCardModule,\r\n-    MatButtonModule,\r\n-    MatInputModule,\r\n-    MatFormFieldModule,\r\n     NgFor,\r\n     NgIf,\r\n     MatTabsModule,\r\n-    AddProductComponent,\r\n+    MatCardModule,\r\n     MatIconModule,\r\n+    MatFormFieldModule,\r\n+    MatInputModule,\r\n+    MatButtonModule,\r\n+    MatExpansionModule,\r\n+    MatChipsModule,\r\n+    MatAutocompleteModule,\r\n     MatSelectModule,\r\n-    MatAutocompleteModule,\r\n-    MatChipsModule,\r\n-    MatExpansionModule,\r\n-    \r\n+    MatDividerModule,\r\n   ],\r\n-\r\n-\r\n-\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n export class TestComponent {\r\n   productForm: FormGroup;\r\n-  imageUrl: any = [\r\n+  @ViewChild('tabGroup') tabGroup!: MatTabGroup;\r\n+  imageUrl: any[] = [\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n@@ -90,8 +83,9 @@\n     { key: 'On sale', value: 'on sale' },\r\n     { key: 'New arrival', value: 'new arrival' },\r\n     { key: 'Trending product', value: 'trending product' },\r\n   ];\r\n+\r\n   categoryArray = [\r\n     { key: 'Fashion', value: 'Women' },\r\n     { key: 'Shoes', value: 'shoes' },\r\n     { key: 'Bags', value: 'bags' },\r\n@@ -105,17 +99,14 @@\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n   ];\r\n-  productForm1!: FormGroup;\r\n \r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n+\r\n   constructor(private fb: FormBuilder) {\r\n     this.productForm = this.fb.group({\r\n-      'images Details': this.fb.array([]), // Note: key with space\r\n-    });\r\n-        this.productForm1 = this.fb.group({\r\n       title: ['', Validators.required],\r\n       description: [''],\r\n       type: [''],\r\n       brand: [''],\r\n@@ -124,10 +115,12 @@\n       price: [''],\r\n       discount: [''],\r\n       stock: [''],\r\n       newProduct: [false],\r\n+      'images Details': this.fb.array([]),\r\n     });\r\n-    this.addImage(); // One initial image\r\n+\r\n+    this.addImage(); // Add initial image entry\r\n   }\r\n \r\n   get imageDetails(): FormArray {\r\n     return this.productForm.get('images Details') as FormArray;\r\n@@ -136,9 +129,9 @@\n   newImage(): FormGroup {\r\n     return this.fb.group({\r\n       alt: ['', Validators.required],\r\n       src: ['', Validators.required], // base64 string\r\n-      preview: [''], // for image preview (not submitted)\r\n+      preview: [''], // for UI preview only\r\n       'variant Details': this.fb.array([this.newVariant()]),\r\n     });\r\n   }\r\n \r\n@@ -187,22 +180,16 @@\n       reader.onerror = (error) => reject(error);\r\n     });\r\n   }\r\n \r\n-  onSubmit() {\r\n-    const data = JSON.parse(JSON.stringify(this.productForm.value));\r\n-    // remove preview field before submit\r\n-    data['images Details'].forEach((img: any) => delete img.preview);\r\n-    console.log('Final Payload:', data);\r\n-    // You can now POST this to API\r\n-  }\r\n   jsonTest() {\r\n-    if (this.productForm1.valid) {\r\n-      const formData = this.productForm1.value;\r\n-\r\n+    console.log('Form Data:', this.productForm.value);\r\n+    if (this.productForm.valid) {\r\n+      const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n+      formData['images Details'].forEach((img: any) => delete img.preview);\r\n       formData.sale = true;\r\n-      console.log('Form Data:', this.productForm1.value);\r\n+      console.log('Final Payload:', formData);\r\n     } else {\r\n-      this.productForm1.markAllAsTouched();\r\n+      this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1750087578295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,5 +191,9 @@\n     } else {\r\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n+\r\n+    goToTab(index: number) {\r\n+    this.tabGroup.selectedIndex = index;\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1750087657476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,7 +193,7 @@\n     }\r\n   }\r\n \r\n     goToTab(index: number) {\r\n-    this.tabGroup.selectedIndex = index;\r\n+    this.tabGroup?.selectedIndex = index;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1750087671309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,7 +193,7 @@\n     }\r\n   }\r\n \r\n     goToTab(index: number) {\r\n-    this.tabGroup?.selectedIndex = index;\r\n+    this.tabGroup.selectedIndex = index;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1750087869421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, ViewChild } from '@angular/core';\r\n+import { Component, ElementRef, ViewChild } from '@angular/core';\r\n import {\r\n   FormGroup,\r\n   FormBuilder,\r\n   FormArray,\r\n@@ -43,8 +43,9 @@\n })\r\n export class TestComponent {\r\n   productForm: FormGroup;\r\n   @ViewChild('tabGroup') tabGroup!: MatTabGroup;\r\n+  @ViewChild('imageTabFocus', { static: false }) imageTabFocus!: ElementRef;\r\n   imageUrl: any[] = [\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n"
                },
                {
                    "date": 1750087886920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,15 @@\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n \r\n-    goToTab(index: number) {\r\n+goToTab(index: number) {\r\n     this.tabGroup.selectedIndex = index;\r\n+\r\n+    // Allow time for tab change before shifting focus\r\n+    setTimeout(() => {\r\n+      if (index === 1 && this.imageTabFocus) {\r\n+        this.imageTabFocus.nativeElement.focus();\r\n+      }\r\n+    }, 200); // Delay ensures tab is visible before focusing\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1750089752530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,22 +105,23 @@\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n \r\n   constructor(private fb: FormBuilder) {\r\n-    this.productForm = this.fb.group({\r\n-      title: ['', Validators.required],\r\n-      description: [''],\r\n-      type: [''],\r\n-      brand: [''],\r\n-      collection: [[]],\r\n-      category: [''],\r\n-      price: [''],\r\n-      discount: [''],\r\n-      stock: [''],\r\n-      newProduct: [false],\r\n-      'images Details': this.fb.array([]),\r\n-    });\r\n+this.productForm = this.fb.group({\r\n+  title: ['', Validators.required],\r\n+  description: ['', Validators.required],\r\n+  type: ['', Validators.required],\r\n+  brand: ['', Validators.required],\r\n+  collection: [[], Validators.required],\r\n+  category: ['', Validators.required],\r\n+  price: ['', Validators.required],\r\n+  discount: ['', Validators.required],\r\n+  stock: ['', Validators.required],\r\n+  newProduct: [false, Validators.requiredTrue],\r\n+  'images Details': this.fb.array([], Validators.required),\r\n+});\r\n \r\n+\r\n     this.addImage(); // Add initial image entry\r\n   }\r\n \r\n   get imageDetails(): FormArray {\r\n"
                },
                {
                    "date": 1750089775922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,25 +127,26 @@\n   get imageDetails(): FormArray {\r\n     return this.productForm.get('images Details') as FormArray;\r\n   }\r\n \r\n-  newImage(): FormGroup {\r\n-    return this.fb.group({\r\n-      alt: ['', Validators.required],\r\n-      src: ['', Validators.required], // base64 string\r\n-      preview: [''], // for UI preview only\r\n-      'variant Details': this.fb.array([this.newVariant()]),\r\n-    });\r\n-  }\r\n+newImage(): FormGroup {\r\n+  return this.fb.group({\r\n+    alt: ['', Validators.required],\r\n+    src: ['', Validators.required], // base64 string\r\n+    preview: [''], // for UI preview only\r\n+    'variant Details': this.fb.array([this.newVariant()], Validators.required),\r\n+  });\r\n+}\r\n \r\n-  newVariant(): FormGroup {\r\n-    return this.fb.group({\r\n-      sku: ['', Validators.required],\r\n-      size: ['', Validators.required],\r\n-      color: ['', Validators.required],\r\n-    });\r\n-  }\r\n+newVariant(): FormGroup {\r\n+  return this.fb.group({\r\n+    sku: ['', Validators.required],\r\n+    size: ['', Validators.required],\r\n+    color: ['', Validators.required],\r\n+  });\r\n+}\r\n \r\n+\r\n   addImage() {\r\n     this.imageDetails.push(this.newImage());\r\n   }\r\n \r\n"
                },
                {
                    "date": 1750089805003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,20 +183,33 @@\n       reader.onerror = (error) => reject(error);\r\n     });\r\n   }\r\n \r\n-  jsonTest() {\r\n-    console.log('Form Data:', this.productForm.value);\r\n-    if (this.productForm.valid) {\r\n-      const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n-      formData['images Details'].forEach((img: any) => delete img.preview);\r\n-      formData.sale = true;\r\n-      console.log('Final Payload:', formData);\r\n+jsonTest() {\r\n+  console.log('Form Data:', this.productForm.value);\r\n+\r\n+  if (this.productForm.valid) {\r\n+    const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n+    formData['images Details'].forEach((img: any) => delete img.preview);\r\n+    formData.sale = true;\r\n+    console.log('Final Payload:', formData);\r\n+  } else {\r\n+    this.markFormGroupTouched(this.productForm);\r\n+    console.warn('Form Invalid:', this.productForm);\r\n+  }\r\n+}\r\n+\r\n+markFormGroupTouched(formGroup: FormGroup | FormArray) {\r\n+  (Object as any).values(formGroup.controls).forEach((control: any) => {\r\n+    if (control.controls) {\r\n+      this.markFormGroupTouched(control); // recurse\r\n     } else {\r\n-      this.productForm.markAllAsTouched();\r\n+      control.markAsTouched();\r\n     }\r\n-  }\r\n+  });\r\n+}\r\n \r\n+\r\n goToTab(index: number) {\r\n     this.tabGroup.selectedIndex = index;\r\n \r\n     // Allow time for tab change before shifting focus\r\n"
                },
                {
                    "date": 1750090240034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n newImage(): FormGroup {\r\n   return this.fb.group({\r\n     alt: ['', Validators.required],\r\n     src: ['', Validators.required], // base64 string\r\n-    preview: [''], // for UI preview only\r\n+    preview: ['https://repository-images.githubusercontent.com/229240000/2b1bba00-eae1-11ea-8b31-ea57fe8a3f95'], // for UI preview only\r\n     'variant Details': this.fb.array([this.newVariant()], Validators.required),\r\n   });\r\n }\r\n \r\n"
                },
                {
                    "date": 1750090326520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n   }\r\n \r\n newImage(): FormGroup {\r\n   return this.fb.group({\r\n-    alt: ['', Validators.required],\r\n+    alt: ['image not found.', Validators.required],\r\n     src: ['', Validators.required], // base64 string\r\n     preview: ['https://repository-images.githubusercontent.com/229240000/2b1bba00-eae1-11ea-8b31-ea57fe8a3f95'], // for UI preview only\r\n     'variant Details': this.fb.array([this.newVariant()], Validators.required),\r\n   });\r\n"
                },
                {
                    "date": 1750091031253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,8 +190,15 @@\n   if (this.productForm.valid) {\r\n     const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n     formData['images Details'].forEach((img: any) => delete img.preview);\r\n     formData.sale = true;\r\n+    formData.tags = [\r\n+            \"s\",\r\n+            \"m\",\r\n+            \"pink\",\r\n+            \"blue\",\r\n+            \"biba\"\r\n+        ],\r\n     console.log('Final Payload:', formData);\r\n   } else {\r\n     this.markFormGroupTouched(this.productForm);\r\n     console.warn('Form Invalid:', this.productForm);\r\n"
                },
                {
                    "date": 1750091153093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import { Component, ElementRef, ViewChild } from '@angular/core';\r\n+import {\r\n+  FormGroup,\r\n+  FormBuilder,\r\n+  FormArray,\r\n+  Validators,\r\n+  ReactiveFormsModule,\r\n+} from '@angular/forms';\r\n+import { NgFor, NgIf } from '@angular/common';\r\n+import { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\r\n+import { MatIconModule } from '@angular/material/icon';\r\n+import { MatCardModule } from '@angular/material/card';\r\n+import { MatFormFieldModule } from '@angular/material/form-field';\r\n+import { MatInputModule } from '@angular/material/input';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n+import { MatExpansionModule } from '@angular/material/expansion';\r\n+import { MatChipsModule } from '@angular/material/chips';\r\n+import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n+import { MatSelectModule } from '@angular/material/select';\r\n+import { MatDividerModule } from '@angular/material/divider';\r\n+\r\n+@Component({\r\n+  selector: 'app-test',\r\n+  standalone: true,\r\n+  imports: [\r\n+    ReactiveFormsModule,\r\n+    NgFor,\r\n+    NgIf,\r\n+    MatTabsModule,\r\n+    MatCardModule,\r\n+    MatIconModule,\r\n+    MatFormFieldModule,\r\n+    MatInputModule,\r\n+    MatButtonModule,\r\n+    MatExpansionModule,\r\n+    MatChipsModule,\r\n+    MatAutocompleteModule,\r\n+    MatSelectModule,\r\n+    MatDividerModule,\r\n+  ],\r\n+  templateUrl: './test.component.html',\r\n+  styleUrl: './test.component.scss',\r\n+})\r\n+export class TestComponent {\r\n+  productForm: FormGroup;\r\n+  @ViewChild('tabGroup') tabGroup!: MatTabGroup;\r\n+  @ViewChild('imageTabFocus', { static: false }) imageTabFocus!: ElementRef;\r\n+  imageUrl: any[] = [\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+  ];\r\n+\r\n+  typeArray = [\r\n+    { key: 'Fashion', value: 'fashion' },\r\n+    { key: 'Shoes', value: 'shoes' },\r\n+    { key: 'Bags', value: 'bags' },\r\n+    { key: 'Watch', value: 'watch' },\r\n+    { key: 'Flower', value: 'flower' },\r\n+    { key: 'Pets', value: 'pets' },\r\n+    { key: 'Electronics', value: 'electronics' },\r\n+    { key: 'Vegetables', value: 'vegetables' },\r\n+    { key: 'Furniture', value: 'furniture' },\r\n+    { key: 'Beauty', value: 'beauty' },\r\n+    { key: 'Tools', value: 'tools' },\r\n+    { key: 'Gym', value: 'gym' },\r\n+    { key: 'Marijuana', value: 'marijuana' },\r\n+  ];\r\n+\r\n+  brandArray = [\r\n+    { key: 'Nike', value: 'nike' },\r\n+    { key: 'Zara', value: 'zara' },\r\n+    { key: 'Denim', value: 'denim' },\r\n+    { key: 'Madame', value: 'madame' },\r\n+    { key: 'Biba', value: 'biba' },\r\n+    { key: 'Max', value: 'max' },\r\n+  ];\r\n+\r\n+  collectionArray = [\r\n+    { key: 'New products', value: 'new products' },\r\n+    { key: 'Best sellers', value: 'best sellers' },\r\n+    { key: 'Featured products', value: 'featured products' },\r\n+    { key: 'On sale', value: 'on sale' },\r\n+    { key: 'New arrival', value: 'new arrival' },\r\n+    { key: 'Trending product', value: 'trending product' },\r\n+  ];\r\n+\r\n+  categoryArray = [\r\n+    { key: 'Fashion', value: 'Women' },\r\n+    { key: 'Shoes', value: 'shoes' },\r\n+    { key: 'Bags', value: 'bags' },\r\n+    { key: 'Watch', value: 'watch' },\r\n+    { key: 'Flower', value: 'flower' },\r\n+    { key: 'Pets', value: 'pets' },\r\n+    { key: 'Electronics', value: 'electronics' },\r\n+    { key: 'Vegetables', value: 'vegetables' },\r\n+    { key: 'Furniture', value: 'furniture' },\r\n+    { key: 'Beauty', value: 'beauty' },\r\n+    { key: 'Tools', value: 'tools' },\r\n+    { key: 'Gym', value: 'gym' },\r\n+    { key: 'Marijuana', value: 'marijuana' },\r\n+  ];\r\n+\r\n+  options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n+  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n+\r\n+  constructor(private fb: FormBuilder) {\r\n+    this.productForm = this.fb.group({\r\n+      title: ['', Validators.required],\r\n+      description: ['', Validators.required],\r\n+      type: ['', Validators.required],\r\n+      brand: ['', Validators.required],\r\n+      collection: [[], Validators.required],\r\n+      category: ['', Validators.required],\r\n+      price: ['', Validators.required],\r\n+      discount: ['', Validators.required],\r\n+      stock: ['', Validators.required],\r\n+      newProduct: [false, Validators.requiredTrue],\r\n+      'images Details': this.fb.array([], Validators.required),\r\n+    });\r\n+\r\n+    this.addImage(); // Add initial image entry\r\n+  }\r\n+\r\n+  get imageDetails(): FormArray {\r\n+    return this.productForm.get('images Details') as FormArray;\r\n+  }\r\n+\r\n+  newImage(): FormGroup {\r\n+    return this.fb.group({\r\n+      alt: ['image not found.', Validators.required],\r\n+      src: ['', Validators.required], // base64 string\r\n+      preview: [\r\n+        'https://repository-images.githubusercontent.com/229240000/2b1bba00-eae1-11ea-8b31-ea57fe8a3f95',\r\n+      ], // for UI preview only\r\n+      'variant Details': this.fb.array(\r\n+        [this.newVariant()],\r\n+        Validators.required\r\n+      ),\r\n+    });\r\n+  }\r\n+\r\n+  newVariant(): FormGroup {\r\n+    return this.fb.group({\r\n+      sku: ['', Validators.required],\r\n+      size: ['', Validators.required],\r\n+      color: ['', Validators.required],\r\n+    });\r\n+  }\r\n+\r\n+  addImage() {\r\n+    this.imageDetails.push(this.newImage());\r\n+  }\r\n+\r\n+  removeImage(index: number) {\r\n+    this.imageDetails.removeAt(index);\r\n+  }\r\n+\r\n+  getVariants(imageIndex: number): FormArray {\r\n+    return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n+  }\r\n+\r\n+  addVariant(imageIndex: number) {\r\n+    this.getVariants(imageIndex).push(this.newVariant());\r\n+  }\r\n+\r\n+  removeVariant(imageIndex: number, variantIndex: number) {\r\n+    this.getVariants(imageIndex).removeAt(variantIndex);\r\n+  }\r\n+\r\n+  async onFileChange(event: any, imageIndex: number) {\r\n+    const file = event.target.files[0];\r\n+    if (file) {\r\n+      const base64 = await this.convertToBase64(file);\r\n+      const group = this.imageDetails.at(imageIndex);\r\n+      group.patchValue({ src: base64, preview: base64 });\r\n+    }\r\n+  }\r\n+\r\n+  convertToBase64(file: File): Promise<string> {\r\n+    return new Promise((resolve, reject) => {\r\n+      const reader = new FileReader();\r\n+      reader.readAsDataURL(file);\r\n+      reader.onload = () => resolve(reader.result as string);\r\n+      reader.onerror = (error) => reject(error);\r\n+    });\r\n+  }\r\n+\r\n+  jsonTest() {\r\n+    console.log('Form Data:', this.productForm.value);\r\n+\r\n+    if (this.productForm.valid) {\r\n+      const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n+      formData['images Details'].forEach((img: any) => delete img.preview);\r\n+      formData.sale = true;\r\n+      (formData.tags = ['s', 'm', 'pink', 'blue', 'biba']),\r\n+        console.log('Final Payload:', formData);\r\n+    } else {\r\n+      this.markFormGroupTouched(this.productForm);\r\n+      console.warn('Form Invalid:', this.productForm);\r\n+    }\r\n+  }\r\n+\r\n+  markFormGroupTouched(formGroup: FormGroup | FormArray) {\r\n+    (Object as any).values(formGroup.controls).forEach((control: any) => {\r\n+      if (control.controls) {\r\n+        this.markFormGroupTouched(control); // recurse\r\n+      } else {\r\n+        control.markAsTouched();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  goToTab(index: number) {\r\n+    this.tabGroup.selectedIndex = index;\r\n+\r\n+    // Allow time for tab change before shifting focus\r\n+    setTimeout(() => {\r\n+      if (index === 1 && this.imageTabFocus) {\r\n+        this.imageTabFocus.nativeElement.focus();\r\n+      }\r\n+    }, 200); // Delay ensures tab is visible before focusing\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1750091222145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,415 +40,5 @@\n   ],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n-export class TestComponent {\r\n-  productForm: FormGroup;\r\n-  @ViewChild('tabGroup') tabGroup!: MatTabGroup;\r\n-  @ViewChild('imageTabFocus', { static: false }) imageTabFocus!: ElementRef;\r\n-  imageUrl: any[] = [\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-  ];\r\n-\r\n-  typeArray = [\r\n-    { key: 'Fashion', value: 'fashion' },\r\n-    { key: 'Shoes', value: 'shoes' },\r\n-    { key: 'Bags', value: 'bags' },\r\n-    { key: 'Watch', value: 'watch' },\r\n-    { key: 'Flower', value: 'flower' },\r\n-    { key: 'Pets', value: 'pets' },\r\n-    { key: 'Electronics', value: 'electronics' },\r\n-    { key: 'Vegetables', value: 'vegetables' },\r\n-    { key: 'Furniture', value: 'furniture' },\r\n-    { key: 'Beauty', value: 'beauty' },\r\n-    { key: 'Tools', value: 'tools' },\r\n-    { key: 'Gym', value: 'gym' },\r\n-    { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n-\r\n-  brandArray = [\r\n-    { key: 'Nike', value: 'nike' },\r\n-    { key: 'Zara', value: 'zara' },\r\n-    { key: 'Denim', value: 'denim' },\r\n-    { key: 'Madame', value: 'madame' },\r\n-    { key: 'Biba', value: 'biba' },\r\n-    { key: 'Max', value: 'max' },\r\n-  ];\r\n-\r\n-  collectionArray = [\r\n-    { key: 'New products', value: 'new products' },\r\n-    { key: 'Best sellers', value: 'best sellers' },\r\n-    { key: 'Featured products', value: 'featured products' },\r\n-    { key: 'On sale', value: 'on sale' },\r\n-    { key: 'New arrival', value: 'new arrival' },\r\n-    { key: 'Trending product', value: 'trending product' },\r\n-  ];\r\n-\r\n-  categoryArray = [\r\n-    { key: 'Fashion', value: 'Women' },\r\n-    { key: 'Shoes', value: 'shoes' },\r\n-    { key: 'Bags', value: 'bags' },\r\n-    { key: 'Watch', value: 'watch' },\r\n-    { key: 'Flower', value: 'flower' },\r\n-    { key: 'Pets', value: 'pets' },\r\n-    { key: 'Electronics', value: 'electronics' },\r\n-    { key: 'Vegetables', value: 'vegetables' },\r\n-    { key: 'Furniture', value: 'furniture' },\r\n-    { key: 'Beauty', value: 'beauty' },\r\n-    { key: 'Tools', value: 'tools' },\r\n-    { key: 'Gym', value: 'gym' },\r\n-    { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n-\r\n-  options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n-  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n-\r\n-  constructor(private fb: FormBuilder) {\r\n-    this.productForm = this.fb.group({\r\n-      title: ['', Validators.required],\r\n-      description: ['', Validators.required],\r\n-      type: ['', Validators.required],\r\n-      brand: ['', Validators.required],\r\n-      collection: [[], Validators.required],\r\n-      category: ['', Validators.required],\r\n-      price: ['', Validators.required],\r\n-      discount: ['', Validators.required],\r\n-      stock: ['', Validators.required],\r\n-      newProduct: [false, Validators.requiredTrue],\r\n-      'images Details': this.fb.array([], Validators.required),\r\n-    });\r\n-\r\n-    this.addImage(); // Add initial image entry\r\n-  }\r\n-\r\n-  get imageDetails(): FormArray {\r\n-    return this.productForm.get('images Details') as FormArray;\r\n-  }\r\n-\r\n-  newImage(): FormGroup {\r\n-    return this.fb.group({\r\n-      alt: ['image not found.', Validators.required],\r\n-      src: ['', Validators.required], // base64 string\r\n-      preview: [\r\n-        'https://repository-images.githubusercontent.com/229240000/2b1bba00-eae1-11ea-8b31-ea57fe8a3f95',\r\n-      ], // for UI preview only\r\n-      'variant Details': this.fb.array(\r\n-        [this.newVariant()],\r\n-        Validators.required\r\n-      ),\r\n-    });\r\n-  }\r\n-\r\n-  newVariant(): FormGroup {\r\n-    return this.fb.group({\r\n-      sku: ['', Validators.required],\r\n-      size: ['', Validators.required],\r\n-      color: ['', Validators.required],\r\n-    });\r\n-  }\r\n-\r\n-  addImage() {\r\n-    this.imageDetails.push(this.newImage());\r\n-  }\r\n-\r\n-  removeImage(index: number) {\r\n-    this.imageDetails.removeAt(index);\r\n-  }\r\n-\r\n-  getVariants(imageIndex: number): FormArray {\r\n-    return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n-  }\r\n-\r\n-  addVariant(imageIndex: number) {\r\n-    this.getVariants(imageIndex).push(this.newVariant());\r\n-  }\r\n-\r\n-  removeVariant(imageIndex: number, variantIndex: number) {\r\n-    this.getVariants(imageIndex).removeAt(variantIndex);\r\n-  }\r\n-\r\n-  async onFileChange(event: any, imageIndex: number) {\r\n-    const file = event.target.files[0];\r\n-    if (file) {\r\n-      const base64 = await this.convertToBase64(file);\r\n-      const group = this.imageDetails.at(imageIndex);\r\n-      group.patchValue({ src: base64, preview: base64 });\r\n-    }\r\n-  }\r\n-\r\n-  convertToBase64(file: File): Promise<string> {\r\n-    return new Promise((resolve, reject) => {\r\n-      const reader = new FileReader();\r\n-      reader.readAsDataURL(file);\r\n-      reader.onload = () => resolve(reader.result as string);\r\n-      reader.onerror = (error) => reject(error);\r\n-    });\r\n-  }\r\n-\r\n-  jsonTest() {\r\n-    console.log('Form Data:', this.productForm.value);\r\n-\r\n-    if (this.productForm.valid) {\r\n-      const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n-      formData['images Details'].forEach((img: any) => delete img.preview);\r\n-      formData.sale = true;\r\n-      (formData.tags = ['s', 'm', 'pink', 'blue', 'biba']),\r\n-        console.log('Final Payload:', formData);\r\n-    } else {\r\n-      this.markFormGroupTouched(this.productForm);\r\n-      console.warn('Form Invalid:', this.productForm);\r\n-    }\r\n-  }\r\n-\r\n-  markFormGroupTouched(formGroup: FormGroup | FormArray) {\r\n-    (Object as any).values(formGroup.controls).forEach((control: any) => {\r\n-      if (control.controls) {\r\n-        this.markFormGroupTouched(control); // recurse\r\n-      } else {\r\n-        control.markAsTouched();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  goToTab(index: number) {\r\n-    this.tabGroup.selectedIndex = index;\r\n-\r\n-    // Allow time for tab change before shifting focus\r\n-    setTimeout(() => {\r\n-      if (index === 1 && this.imageTabFocus) {\r\n-        this.imageTabFocus.nativeElement.focus();\r\n-      }\r\n-    }, 200); // Delay ensures tab is visible before focusing\r\n-  }\r\n-}\r\n-import { Component, ElementRef, ViewChild } from '@angular/core';\r\n-import {\r\n-  FormGroup,\r\n-  FormBuilder,\r\n-  FormArray,\r\n-  Validators,\r\n-  ReactiveFormsModule,\r\n-} from '@angular/forms';\r\n-import { NgFor, NgIf } from '@angular/common';\r\n-import { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\r\n-import { MatIconModule } from '@angular/material/icon';\r\n-import { MatCardModule } from '@angular/material/card';\r\n-import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatInputModule } from '@angular/material/input';\r\n-import { MatButtonModule } from '@angular/material/button';\r\n-import { MatExpansionModule } from '@angular/material/expansion';\r\n-import { MatChipsModule } from '@angular/material/chips';\r\n-import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n-import { MatSelectModule } from '@angular/material/select';\r\n-import { MatDividerModule } from '@angular/material/divider';\r\n-\r\n-@Component({\r\n-  selector: 'app-test',\r\n-  standalone: true,\r\n-  imports: [\r\n-    ReactiveFormsModule,\r\n-    NgFor,\r\n-    NgIf,\r\n-    MatTabsModule,\r\n-    MatCardModule,\r\n-    MatIconModule,\r\n-    MatFormFieldModule,\r\n-    MatInputModule,\r\n-    MatButtonModule,\r\n-    MatExpansionModule,\r\n-    MatChipsModule,\r\n-    MatAutocompleteModule,\r\n-    MatSelectModule,\r\n-    MatDividerModule,\r\n-  ],\r\n-  templateUrl: './test.component.html',\r\n-  styleUrl: './test.component.scss',\r\n-})\r\n-export class TestComponent {\r\n-  productForm: FormGroup;\r\n-  @ViewChild('tabGroup') tabGroup!: MatTabGroup;\r\n-  @ViewChild('imageTabFocus', { static: false }) imageTabFocus!: ElementRef;\r\n-  imageUrl: any[] = [\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-  ];\r\n-\r\n-  typeArray = [\r\n-    { key: 'Fashion', value: 'fashion' },\r\n-    { key: 'Shoes', value: 'shoes' },\r\n-    { key: 'Bags', value: 'bags' },\r\n-    { key: 'Watch', value: 'watch' },\r\n-    { key: 'Flower', value: 'flower' },\r\n-    { key: 'Pets', value: 'pets' },\r\n-    { key: 'Electronics', value: 'electronics' },\r\n-    { key: 'Vegetables', value: 'vegetables' },\r\n-    { key: 'Furniture', value: 'furniture' },\r\n-    { key: 'Beauty', value: 'beauty' },\r\n-    { key: 'Tools', value: 'tools' },\r\n-    { key: 'Gym', value: 'gym' },\r\n-    { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n-\r\n-  brandArray = [\r\n-    { key: 'Nike', value: 'nike' },\r\n-    { key: 'Zara', value: 'zara' },\r\n-    { key: 'Denim', value: 'denim' },\r\n-    { key: 'Madame', value: 'madame' },\r\n-    { key: 'Biba', value: 'biba' },\r\n-    { key: 'Max', value: 'max' },\r\n-  ];\r\n-\r\n-  collectionArray = [\r\n-    { key: 'New products', value: 'new products' },\r\n-    { key: 'Best sellers', value: 'best sellers' },\r\n-    { key: 'Featured products', value: 'featured products' },\r\n-    { key: 'On sale', value: 'on sale' },\r\n-    { key: 'New arrival', value: 'new arrival' },\r\n-    { key: 'Trending product', value: 'trending product' },\r\n-  ];\r\n-\r\n-  categoryArray = [\r\n-    { key: 'Fashion', value: 'Women' },\r\n-    { key: 'Shoes', value: 'shoes' },\r\n-    { key: 'Bags', value: 'bags' },\r\n-    { key: 'Watch', value: 'watch' },\r\n-    { key: 'Flower', value: 'flower' },\r\n-    { key: 'Pets', value: 'pets' },\r\n-    { key: 'Electronics', value: 'electronics' },\r\n-    { key: 'Vegetables', value: 'vegetables' },\r\n-    { key: 'Furniture', value: 'furniture' },\r\n-    { key: 'Beauty', value: 'beauty' },\r\n-    { key: 'Tools', value: 'tools' },\r\n-    { key: 'Gym', value: 'gym' },\r\n-    { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n-\r\n-  options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n-  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n-\r\n-  constructor(private fb: FormBuilder) {\r\n-this.productForm = this.fb.group({\r\n-  title: ['', Validators.required],\r\n-  description: ['', Validators.required],\r\n-  type: ['', Validators.required],\r\n-  brand: ['', Validators.required],\r\n-  collection: [[], Validators.required],\r\n-  category: ['', Validators.required],\r\n-  price: ['', Validators.required],\r\n-  discount: ['', Validators.required],\r\n-  stock: ['', Validators.required],\r\n-  newProduct: [false, Validators.requiredTrue],\r\n-  'images Details': this.fb.array([], Validators.required),\r\n-});\r\n-\r\n-\r\n-    this.addImage(); // Add initial image entry\r\n-  }\r\n-\r\n-  get imageDetails(): FormArray {\r\n-    return this.productForm.get('images Details') as FormArray;\r\n-  }\r\n-\r\n-newImage(): FormGroup {\r\n-  return this.fb.group({\r\n-    alt: ['image not found.', Validators.required],\r\n-    src: ['', Validators.required], // base64 string\r\n-    preview: ['https://repository-images.githubusercontent.com/229240000/2b1bba00-eae1-11ea-8b31-ea57fe8a3f95'], // for UI preview only\r\n-    'variant Details': this.fb.array([this.newVariant()], Validators.required),\r\n-  });\r\n-}\r\n-\r\n-newVariant(): FormGroup {\r\n-  return this.fb.group({\r\n-    sku: ['', Validators.required],\r\n-    size: ['', Validators.required],\r\n-    color: ['', Validators.required],\r\n-  });\r\n-}\r\n-\r\n-\r\n-  addImage() {\r\n-    this.imageDetails.push(this.newImage());\r\n-  }\r\n-\r\n-  removeImage(index: number) {\r\n-    this.imageDetails.removeAt(index);\r\n-  }\r\n-\r\n-  getVariants(imageIndex: number): FormArray {\r\n-    return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n-  }\r\n-\r\n-  addVariant(imageIndex: number) {\r\n-    this.getVariants(imageIndex).push(this.newVariant());\r\n-  }\r\n-\r\n-  removeVariant(imageIndex: number, variantIndex: number) {\r\n-    this.getVariants(imageIndex).removeAt(variantIndex);\r\n-  }\r\n-\r\n-  async onFileChange(event: any, imageIndex: number) {\r\n-    const file = event.target.files[0];\r\n-    if (file) {\r\n-      const base64 = await this.convertToBase64(file);\r\n-      const group = this.imageDetails.at(imageIndex);\r\n-      group.patchValue({ src: base64, preview: base64 });\r\n-    }\r\n-  }\r\n-\r\n-  convertToBase64(file: File): Promise<string> {\r\n-    return new Promise((resolve, reject) => {\r\n-      const reader = new FileReader();\r\n-      reader.readAsDataURL(file);\r\n-      reader.onload = () => resolve(reader.result as string);\r\n-      reader.onerror = (error) => reject(error);\r\n-    });\r\n-  }\r\n-\r\n-jsonTest() {\r\n-  console.log('Form Data:', this.productForm.value);\r\n-\r\n-  if (this.productForm.valid) {\r\n-    const formData = JSON.parse(JSON.stringify(this.productForm.value));\r\n-    formData['images Details'].forEach((img: any) => delete img.preview);\r\n-    formData.sale = true;\r\n-    formData.tags = [\r\n-            \"s\",\r\n-            \"m\",\r\n-            \"pink\",\r\n-            \"blue\",\r\n-            \"biba\"\r\n-        ],\r\n-    console.log('Final Payload:', formData);\r\n-  } else {\r\n-    this.markFormGroupTouched(this.productForm);\r\n-    console.warn('Form Invalid:', this.productForm);\r\n-  }\r\n-}\r\n-\r\n-markFormGroupTouched(formGroup: FormGroup | FormArray) {\r\n-  (Object as any).values(formGroup.controls).forEach((control: any) => {\r\n-    if (control.controls) {\r\n-      this.markFormGroupTouched(control); // recurse\r\n-    } else {\r\n-      control.markAsTouched();\r\n-    }\r\n-  });\r\n-}\r\n-\r\n-\r\n-goToTab(index: number) {\r\n-    this.tabGroup.selectedIndex = index;\r\n-\r\n-    // Allow time for tab change before shifting focus\r\n-    setTimeout(() => {\r\n-      if (index === 1 && this.imageTabFocus) {\r\n-        this.imageTabFocus.nativeElement.focus();\r\n-      }\r\n-    }, 200); // Delay ensures tab is visible before focusing\r\n-  }\r\n-}\r\n+export class TestComponent {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750091383576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n import { MatChipsModule } from '@angular/material/chips';\r\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatDividerModule } from '@angular/material/divider';\r\n+import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n@@ -36,9 +37,10 @@\n     MatChipsModule,\r\n     MatAutocompleteModule,\r\n     MatSelectModule,\r\n     MatDividerModule,\r\n-  ],\r\n+    AddProductComponent\r\n+],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n export class TestComponent {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751083089178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,19 @@\n-import { Component, ElementRef, ViewChild } from '@angular/core';\r\n import {\r\n-  FormGroup,\r\n-  FormBuilder,\r\n-  FormArray,\r\n-  Validators,\r\n-  ReactiveFormsModule,\r\n-} from '@angular/forms';\r\n+  Component,\r\n+  ElementRef,\r\n+  ViewChild,\r\n+  NgZone,\r\n+  Output,\r\n+  EventEmitter,\r\n+} from '@angular/core';\r\n+import * as turf from '@turf/turf';\r\n+import * as geolib from 'geolib';\r\n+\r\n+import { ApiService, Maps } from '../services/api.service';\r\n+\r\n+const colors = ['red', 'blue', 'green', 'yellow'];\r\n+let colorIndex = 0;\r\n import { NgFor, NgIf } from '@angular/common';\r\n import { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\r\n import { MatIconModule } from '@angular/material/icon';\r\n import { MatCardModule } from '@angular/material/card';\r\n@@ -42,5 +49,90 @@\n ],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n-export class TestComponent {}\n\\ No newline at end of file\n+export class TestComponent  {\r\n+  @ViewChild('search') searchElementRef: ElementRef;\r\n+  @ViewChild('map') mapElementRef: ElementRef;\r\n+  @Output() locationSelected = new EventEmitter<any>();\r\n+\r\n+  public entries = [];\r\n+  private map: google.maps.Map;\r\n+\r\n+  constructor(apiService: ApiService, private ngZone: NgZone) {\r\n+    apiService.api.then((maps) => {\r\n+      this.initAutocomplete(maps);\r\n+      this.initMap(maps);\r\n+    });\r\n+  }\r\n+\r\n+  initAutocomplete(maps: Maps) {\r\n+    const autocomplete = new maps.places.Autocomplete(\r\n+      this.searchElementRef.nativeElement\r\n+    );\r\n+    autocomplete.addListener('place_changed', () => {\r\n+      this.ngZone.run(() => {\r\n+        this.onPlaceChange(autocomplete.getPlace());\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  initMap(maps: Maps) {\r\n+    this.map = new maps.Map(this.mapElementRef.nativeElement, {\r\n+      zoom: 6,\r\n+      center: { lat: 20.5937, lng: 78.9629 }, // Center on India\r\n+    });\r\n+  }\r\n+\r\n+  onPlaceChange(place: google.maps.places.PlaceResult) {\r\n+    this.map.setCenter(place.geometry.location);\r\n+\r\n+    const color = colors[colorIndex++ % colors.length];\r\n+    const marker = new google.maps.Marker({\r\n+      position: place.geometry.location,\r\n+      map: this.map,\r\n+      icon: this.pin(color),\r\n+    });\r\n+\r\n+    const location = this.locationFromPlace(place);\r\n+    this.entries.unshift({ place, marker, color, location });\r\n+\r\n+    // Emit parsed location\r\n+    this.locationSelected.emit(location);\r\n+  }\r\n+\r\n+  pin(color: string) {\r\n+    return {\r\n+      path: google.maps.SymbolPath.CIRCLE,\r\n+      fillColor: color,\r\n+      fillOpacity: 1,\r\n+      strokeWeight: 1,\r\n+      scale: 7,\r\n+    };\r\n+  }\r\n+\r\n+  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+    const components = place.address_components;\r\n+    const get = (type: string, short = false) =>\r\n+      components?.find((c) => c.types.includes(type))?.[\r\n+        short ? 'short_name' : 'long_name'\r\n+      ];\r\n+\r\n+    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+    const stateCode = get('administrative_area_level_1', true);\r\n+    const countryName = get('country');\r\n+    const countryCode = get('country', true);\r\n+    const name = place.name !== cityName ? place.name : null;\r\n+\r\n+    return {\r\n+      name,\r\n+      cityName,\r\n+      stateCode,\r\n+      countryName,\r\n+      countryCode,\r\n+      coordinates: {\r\n+        latitude: place.geometry.location.lat(),\r\n+        longitude: place.geometry.location.lng(),\r\n+      },\r\n+    };\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1751083357920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatDividerModule } from '@angular/material/divider';\r\n import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n+import { ReactiveFormsModule } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n@@ -50,14 +51,14 @@\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n export class TestComponent  {\r\n-  @ViewChild('search') searchElementRef: ElementRef;\r\n-  @ViewChild('map') mapElementRef: ElementRef;\r\n+  @ViewChild('search') searchElementRef!: ElementRef;\r\n+  @ViewChild('map') mapElementRef!: ElementRef;\r\n   @Output() locationSelected = new EventEmitter<any>();\r\n \r\n   public entries = [];\r\n-  private map: google.maps.Map;\r\n+  private map!: google.maps.Map;\r\n \r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n     apiService.api.then((maps) => {\r\n       this.initAutocomplete(maps);\r\n@@ -109,30 +110,30 @@\n       scale: 7,\r\n     };\r\n   }\r\n \r\n-  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-    const components = place.address_components;\r\n-    const get = (type: string, short = false) =>\r\n-      components?.find((c) => c.types.includes(type))?.[\r\n-        short ? 'short_name' : 'long_name'\r\n-      ];\r\n+  // locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+  //   const components = place.address_components;\r\n+  //   const get = (type: string, short = false) =>\r\n+  //     components?.find((c) => c.types.includes(type))?.[\r\n+  //       short ? 'short_name' : 'long_name'\r\n+  //     ];\r\n \r\n-    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-    const stateCode = get('administrative_area_level_1', true);\r\n-    const countryName = get('country');\r\n-    const countryCode = get('country', true);\r\n-    const name = place.name !== cityName ? place.name : null;\r\n+  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+  //   const stateCode = get('administrative_area_level_1', true);\r\n+  //   const countryName = get('country');\r\n+  //   const countryCode = get('country', true);\r\n+  //   const name = place.name !== cityName ? place.name : null;\r\n \r\n-    return {\r\n-      name,\r\n-      cityName,\r\n-      stateCode,\r\n-      countryName,\r\n-      countryCode,\r\n-      coordinates: {\r\n-        latitude: place.geometry.location.lat(),\r\n-        longitude: place.geometry.location.lng(),\r\n-      },\r\n-    };\r\n-  }\r\n+  //   return {\r\n+  //     name,\r\n+  //     cityName,\r\n+  //     stateCode,\r\n+  //     countryName,\r\n+  //     countryCode,\r\n+  //     coordinates: {\r\n+  //       latitude: place.geometry.location.lat(),\r\n+  //       longitude: place.geometry.location.lng(),\r\n+  //     },\r\n+  //   };\r\n+  // }\r\n }\r\n"
                },
                {
                    "date": 1751083438749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,35 @@\n     // Emit parsed location\r\n     this.locationSelected.emit(location);\r\n   }\r\n \r\n+\r\n+    locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+    const components = place.address_components;\r\n+    const get = (type: string, short = false) =>\r\n+      components?.find((c) => c.types.includes(type))?.[\r\n+        short ? 'short_name' : 'long_name'\r\n+      ];\r\n+\r\n+    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+    const stateCode = get('administrative_area_level_1', true);\r\n+    const countryName = get('country');\r\n+    const countryCode = get('country', true);\r\n+    const name = place.name !== cityName ? place.name : null;\r\n+\r\n+    return {\r\n+      name,\r\n+      cityName,\r\n+      stateCode,\r\n+      countryName,\r\n+      countryCode,\r\n+      coordinates: {\r\n+        latitude: place.geometry.location.lat(),\r\n+        longitude: place.geometry.location.lng(),\r\n+      },\r\n+    };\r\n+  }\r\n+\r\n   pin(color: string) {\r\n     return {\r\n       path: google.maps.SymbolPath.CIRCLE,\r\n       fillColor: color,\r\n@@ -110,30 +137,30 @@\n       scale: 7,\r\n     };\r\n   }\r\n \r\n-  // locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-  //   const components = place.address_components;\r\n-  //   const get = (type: string, short = false) =>\r\n-  //     components?.find((c) => c.types.includes(type))?.[\r\n-  //       short ? 'short_name' : 'long_name'\r\n-  //     ];\r\n+  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+    const components = place.address_components;\r\n+    const get = (type: string, short = false) =>\r\n+      components?.find((c) => c.types.includes(type))?.[\r\n+        short ? 'short_name' : 'long_name'\r\n+      ];\r\n \r\n-  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-  //   const stateCode = get('administrative_area_level_1', true);\r\n-  //   const countryName = get('country');\r\n-  //   const countryCode = get('country', true);\r\n-  //   const name = place.name !== cityName ? place.name : null;\r\n+    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+    const stateCode = get('administrative_area_level_1', true);\r\n+    const countryName = get('country');\r\n+    const countryCode = get('country', true);\r\n+    const name = place.name !== cityName ? place.name : null;\r\n \r\n-  //   return {\r\n-  //     name,\r\n-  //     cityName,\r\n-  //     stateCode,\r\n-  //     countryName,\r\n-  //     countryCode,\r\n-  //     coordinates: {\r\n-  //       latitude: place.geometry.location.lat(),\r\n-  //       longitude: place.geometry.location.lng(),\r\n-  //     },\r\n-  //   };\r\n-  // }\r\n+    return {\r\n+      name,\r\n+      cityName,\r\n+      stateCode,\r\n+      countryName,\r\n+      countryCode,\r\n+      coordinates: {\r\n+        latitude: place.geometry.location.lat(),\r\n+        longitude: place.geometry.location.lng(),\r\n+      },\r\n+    };\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1751083860498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,24 @@\n   @ViewChild('search') searchElementRef!: ElementRef;\r\n   @ViewChild('map') mapElementRef!: ElementRef;\r\n   @Output() locationSelected = new EventEmitter<any>();\r\n \r\n-  public entries = [];\r\n+  public entries: Array<{\r\n+    place: google.maps.places.PlaceResult;\r\n+    marker: google.maps.Marker;\r\n+    color: string;\r\n+    location: {\r\n+      name: string | null | undefined;\r\n+      cityName: string | undefined;\r\n+      stateCode: string | undefined;\r\n+      countryName: string | undefined;\r\n+      countryCode: string | undefined;\r\n+      coordinates: {\r\n+        latitude: number;\r\n+        longitude: number;\r\n+      };\r\n+    };\r\n+  }> = [];\r\n   private map!: google.maps.Map;\r\n \r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n     apiService.api.then((maps) => {\r\n@@ -83,52 +98,104 @@\n       center: { lat: 20.5937, lng: 78.9629 }, // Center on India\r\n     });\r\n   }\r\n \r\n-  onPlaceChange(place: google.maps.places.PlaceResult) {\r\n-    this.map.setCenter(place.geometry.location);\r\n+  // onPlaceChange(place: google.maps.places.PlaceResult) {\r\n+  //   this.map.setCenter(place.geometry.location);\r\n \r\n-    const color = colors[colorIndex++ % colors.length];\r\n-    const marker = new google.maps.Marker({\r\n-      position: place.geometry.location,\r\n-      map: this.map,\r\n-      icon: this.pin(color),\r\n-    });\r\n+  //   const color = colors[colorIndex++ % colors.length];\r\n+  //   const marker = new google.maps.Marker({\r\n+  //     position: place.geometry.location,\r\n+  //     map: this.map,\r\n+  //     icon: this.pin(color),\r\n+  //   });\r\n \r\n-    const location = this.locationFromPlace(place);\r\n-    this.entries.unshift({ place, marker, color, location });\r\n+  //   const location = this.locationFromPlace(place);\r\n+  //   this.entries.unshift({ place, marker, color, location });\r\n \r\n-    // Emit parsed location\r\n-    this.locationSelected.emit(location);\r\n+  //   // Emit parsed location\r\n+  //   this.locationSelected.emit(location);\r\n+  // }\r\n+\r\n+\r\n+  onPlaceChange(place: google.maps.places.PlaceResult) {\r\n+  if (!place.geometry || !place.geometry.location) {\r\n+    console.error('Invalid place result: missing geometry');\r\n+    return;\r\n   }\r\n \r\n+  const location = place.geometry.location;\r\n \r\n-    locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-    const components = place.address_components;\r\n-    const get = (type: string, short = false) =>\r\n-      components?.find((c) => c.types.includes(type))?.[\r\n-        short ? 'short_name' : 'long_name'\r\n-      ];\r\n+  this.map.setCenter(location);\r\n \r\n-    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-    const stateCode = get('administrative_area_level_1', true);\r\n-    const countryName = get('country');\r\n-    const countryCode = get('country', true);\r\n-    const name = place.name !== cityName ? place.name : null;\r\n+  const color = colors[colorIndex++ % colors.length];\r\n+  const marker = new google.maps.Marker({\r\n+    position: location,\r\n+    map: this.map,\r\n+    icon: this.pin(color),\r\n+  });\r\n \r\n-    return {\r\n-      name,\r\n-      cityName,\r\n-      stateCode,\r\n-      countryName,\r\n-      countryCode,\r\n-      coordinates: {\r\n-        latitude: place.geometry.location.lat(),\r\n-        longitude: place.geometry.location.lng(),\r\n-      },\r\n-    };\r\n-  }\r\n+  const parsedLocation = this.locationFromPlace(place);\r\n+  this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n \r\n+  this.locationSelected.emit(parsedLocation);\r\n+}\r\n+locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+  const components = place.address_components;\r\n+  const get = (type: string, short = false) =>\r\n+    components?.find((c) => c.types.includes(type))?.[\r\n+      short ? 'short_name' : 'long_name'\r\n+    ];\r\n+\r\n+  const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+  const stateCode = get('administrative_area_level_1', true);\r\n+  const countryName = get('country');\r\n+  const countryCode = get('country', true);\r\n+  const name = place.name !== cityName ? place.name : null;\r\n+\r\n+  const coords = place.geometry?.location;\r\n+\r\n+  return {\r\n+    name,\r\n+    cityName,\r\n+    stateCode,\r\n+    countryName,\r\n+    countryCode,\r\n+    coordinates: {\r\n+      latitude: coords?.lat() ?? 0,\r\n+      longitude: coords?.lng() ?? 0,\r\n+    },\r\n+  };\r\n+}\r\n+\r\n+\r\n+\r\n+  //   locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+  //   const components = place.address_components;\r\n+  //   const get = (type: string, short = false) =>\r\n+  //     components?.find((c) => c.types.includes(type))?.[\r\n+  //       short ? 'short_name' : 'long_name'\r\n+  //     ];\r\n+\r\n+  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+  //   const stateCode = get('administrative_area_level_1', true);\r\n+  //   const countryName = get('country');\r\n+  //   const countryCode = get('country', true);\r\n+  //   const name = place.name !== cityName ? place.name : null;\r\n+\r\n+  //   return {\r\n+  //     name,\r\n+  //     cityName,\r\n+  //     stateCode,\r\n+  //     countryName,\r\n+  //     countryCode,\r\n+  //     coordinates: {\r\n+  //       latitude: place.geometry.location.lat(),\r\n+  //       longitude: place.geometry.location.lng(),\r\n+  //     },\r\n+  //   };\r\n+  // }\r\n+\r\n   pin(color: string) {\r\n     return {\r\n       path: google.maps.SymbolPath.CIRCLE,\r\n       fillColor: color,\r\n@@ -137,30 +204,30 @@\n       scale: 7,\r\n     };\r\n   }\r\n \r\n-  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-    const components = place.address_components;\r\n-    const get = (type: string, short = false) =>\r\n-      components?.find((c) => c.types.includes(type))?.[\r\n-        short ? 'short_name' : 'long_name'\r\n-      ];\r\n+  // locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+  //   const components = place.address_components;\r\n+  //   const get = (type: string, short = false) =>\r\n+  //     components?.find((c) => c.types.includes(type))?.[\r\n+  //       short ? 'short_name' : 'long_name'\r\n+  //     ];\r\n \r\n-    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-    const stateCode = get('administrative_area_level_1', true);\r\n-    const countryName = get('country');\r\n-    const countryCode = get('country', true);\r\n-    const name = place.name !== cityName ? place.name : null;\r\n+  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+  //   const stateCode = get('administrative_area_level_1', true);\r\n+  //   const countryName = get('country');\r\n+  //   const countryCode = get('country', true);\r\n+  //   const name = place.name !== cityName ? place.name : null;\r\n \r\n-    return {\r\n-      name,\r\n-      cityName,\r\n-      stateCode,\r\n-      countryName,\r\n-      countryCode,\r\n-      coordinates: {\r\n-        latitude: place.geometry.location.lat(),\r\n-        longitude: place.geometry.location.lng(),\r\n-      },\r\n-    };\r\n-  }\r\n+  //   return {\r\n+  //     name,\r\n+  //     cityName,\r\n+  //     stateCode,\r\n+  //     countryName,\r\n+  //     countryCode,\r\n+  //     coordinates: {\r\n+  //       latitude: place.geometry.location.lat(),\r\n+  //       longitude: place.geometry.location.lng(),\r\n+  //     },\r\n+  //   };\r\n+  // }\r\n }\r\n"
                },
                {
                    "date": 1751084562615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,17 @@\n   }> = [];\r\n   private map!: google.maps.Map;\r\n \r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n-    apiService.api.then((maps) => {\r\n-      this.initAutocomplete(maps);\r\n-      this.initMap(maps);\r\n-    });\r\n+    // apiService.api.then((maps) => {\r\n+    //   this.initAutocomplete(maps);\r\n+    //   this.initMap(maps);\r\n+    // });\r\n+\r\n+      apiService.load().then(maps => {\r\n+    console.log('Google Maps loaded!', maps);\r\n+    // you can now safely use google.maps\r\n+  }).catch(err => console.error(err));\r\n   }\r\n \r\n   initAutocomplete(maps: Maps) {\r\n     const autocomplete = new maps.places.Autocomplete(\r\n"
                },
                {
                    "date": 1751084823180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,10 @@\n     const autocomplete = new maps.places.Autocomplete(\r\n       this.searchElementRef.nativeElement\r\n     );\r\n     autocomplete.addListener('place_changed', () => {\r\n+\r\n+      console.log('test')\r\n       this.ngZone.run(() => {\r\n         this.onPlaceChange(autocomplete.getPlace());\r\n       });\r\n     });\r\n"
                },
                {
                    "date": 1751084874670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,26 +105,11 @@\n       center: { lat: 20.5937, lng: 78.9629 }, // Center on India\r\n     });\r\n   }\r\n \r\n-  // onPlaceChange(place: google.maps.places.PlaceResult) {\r\n-  //   this.map.setCenter(place.geometry.location);\r\n \r\n-  //   const color = colors[colorIndex++ % colors.length];\r\n-  //   const marker = new google.maps.Marker({\r\n-  //     position: place.geometry.location,\r\n-  //     map: this.map,\r\n-  //     icon: this.pin(color),\r\n-  //   });\r\n \r\n-  //   const location = this.locationFromPlace(place);\r\n-  //   this.entries.unshift({ place, marker, color, location });\r\n \r\n-  //   // Emit parsed location\r\n-  //   this.locationSelected.emit(location);\r\n-  // }\r\n-\r\n-\r\n   onPlaceChange(place: google.maps.places.PlaceResult) {\r\n   if (!place.geometry || !place.geometry.location) {\r\n     console.error('Invalid place result: missing geometry');\r\n     return;\r\n"
                },
                {
                    "date": 1751084882024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,34 +160,9 @@\n }\r\n \r\n \r\n \r\n-  //   locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-  //   const components = place.address_components;\r\n-  //   const get = (type: string, short = false) =>\r\n-  //     components?.find((c) => c.types.includes(type))?.[\r\n-  //       short ? 'short_name' : 'long_name'\r\n-  //     ];\r\n \r\n-  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-  //   const stateCode = get('administrative_area_level_1', true);\r\n-  //   const countryName = get('country');\r\n-  //   const countryCode = get('country', true);\r\n-  //   const name = place.name !== cityName ? place.name : null;\r\n-\r\n-  //   return {\r\n-  //     name,\r\n-  //     cityName,\r\n-  //     stateCode,\r\n-  //     countryName,\r\n-  //     countryCode,\r\n-  //     coordinates: {\r\n-  //       latitude: place.geometry.location.lat(),\r\n-  //       longitude: place.geometry.location.lng(),\r\n-  //     },\r\n-  //   };\r\n-  // }\r\n-\r\n   pin(color: string) {\r\n     return {\r\n       path: google.maps.SymbolPath.CIRCLE,\r\n       fillColor: color,\r\n"
                },
                {
                    "date": 1751084981486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,8 @@\n   }> = [];\r\n   private map!: google.maps.Map;\r\n \r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n-    // apiService.api.then((maps) => {\r\n-    //   this.initAutocomplete(maps);\r\n-    //   this.initMap(maps);\r\n-    // });\r\n \r\n       apiService.load().then(maps => {\r\n     console.log('Google Maps loaded!', maps);\r\n     // you can now safely use google.maps\r\n@@ -171,30 +167,6 @@\n       scale: 7,\r\n     };\r\n   }\r\n \r\n-  // locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-  //   const components = place.address_components;\r\n-  //   const get = (type: string, short = false) =>\r\n-  //     components?.find((c) => c.types.includes(type))?.[\r\n-  //       short ? 'short_name' : 'long_name'\r\n-  //     ];\r\n \r\n-  //   const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-  //   const stateCode = get('administrative_area_level_1', true);\r\n-  //   const countryName = get('country');\r\n-  //   const countryCode = get('country', true);\r\n-  //   const name = place.name !== cityName ? place.name : null;\r\n-\r\n-  //   return {\r\n-  //     name,\r\n-  //     cityName,\r\n-  //     stateCode,\r\n-  //     countryName,\r\n-  //     countryCode,\r\n-  //     coordinates: {\r\n-  //       latitude: place.geometry.location.lat(),\r\n-  //       longitude: place.geometry.location.lng(),\r\n-  //     },\r\n-  //   };\r\n-  // }\r\n }\r\n"
                },
                {
                    "date": 1751085051186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,10 @@\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n \r\n       apiService.load().then(maps => {\r\n     console.log('Google Maps loaded!', maps);\r\n-    // you can now safely use google.maps\r\n+          this.initAutocomplete(maps);\r\n+      this.initMap(maps);\r\n   }).catch(err => console.error(err));\r\n   }\r\n \r\n   initAutocomplete(maps: Maps) {\r\n"
                },
                {
                    "date": 1751086112239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,9 @@\n     icon: this.pin(color),\r\n   });\r\n \r\n   const parsedLocation = this.locationFromPlace(place);\r\n+  console.log('parsedLocation',parsedLocation)\r\n   this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n \r\n   this.locationSelected.emit(parsedLocation);\r\n }\r\n"
                },
                {
                    "date": 1751086602902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n   this.locationSelected.emit(parsedLocation);\r\n }\r\n locationFromPlace(place: google.maps.places.PlaceResult) {\r\n   const components = place.address_components;\r\n+  console.log('components',components)\r\n   const get = (type: string, short = false) =>\r\n     components?.find((c) => c.types.includes(type))?.[\r\n       short ? 'short_name' : 'long_name'\r\n     ];\r\n"
                },
                {
                    "date": 1751086746145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,26 +55,11 @@\n   @ViewChild('search') searchElementRef!: ElementRef;\r\n   @ViewChild('map') mapElementRef!: ElementRef;\r\n   @Output() locationSelected = new EventEmitter<any>();\r\n \r\n-  public entries: Array<{\r\n-    place: google.maps.places.PlaceResult;\r\n-    marker: google.maps.Marker;\r\n-    color: string;\r\n-    location: {\r\n-      name: string | null | undefined;\r\n-      cityName: string | undefined;\r\n-      stateCode: string | undefined;\r\n-      countryName: string | undefined;\r\n-      countryCode: string | undefined;\r\n-      coordinates: {\r\n-        latitude: number;\r\n-        longitude: number;\r\n-      };\r\n-    };\r\n-  }> = [];\r\n+\r\n   private map!: google.maps.Map;\r\n-\r\n+entries:any\r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n \r\n       apiService.load().then(maps => {\r\n     console.log('Google Maps loaded!', maps);\r\n"
                },
                {
                    "date": 1751086849852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,63 +90,67 @@\n \r\n \r\n \r\n \r\n-  onPlaceChange(place: google.maps.places.PlaceResult) {\r\n-  if (!place.geometry || !place.geometry.location) {\r\n-    console.error('Invalid place result: missing geometry');\r\n-    return;\r\n-  }\r\n+ onPlaceChange(place: google.maps.places.PlaceResult) {\r\n+    if (!place.geometry || !place.geometry.location) {\r\n+      console.error('Invalid place result: missing geometry');\r\n+      return;\r\n+    }\r\n \r\n-  const location = place.geometry.location;\r\n+    const location = place.geometry.location;\r\n \r\n-  this.map.setCenter(location);\r\n+    this.map.setCenter(location);\r\n \r\n-  const color = colors[colorIndex++ % colors.length];\r\n-  const marker = new google.maps.Marker({\r\n-    position: location,\r\n-    map: this.map,\r\n-    icon: this.pin(color),\r\n-  });\r\n+    const color = this.colors[this.colorIndex++ % this.colors.length];\r\n+    const marker = new google.maps.Marker({\r\n+      position: location,\r\n+      map: this.map,\r\n+      icon: this.pin(color),\r\n+    });\r\n \r\n-  const parsedLocation = this.locationFromPlace(place);\r\n-  console.log('parsedLocation',parsedLocation)\r\n-  this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n+    const parsedLocation = this.locationFromPlace(place);\r\n+    console.log('parsedLocation', parsedLocation);\r\n \r\n-  this.locationSelected.emit(parsedLocation);\r\n-}\r\n-locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-  const components = place.address_components;\r\n-  console.log('components',components)\r\n-  const get = (type: string, short = false) =>\r\n-    components?.find((c) => c.types.includes(type))?.[\r\n-      short ? 'short_name' : 'long_name'\r\n-    ];\r\n+    this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n+    this.locationSelected.emit(parsedLocation);\r\n+  }\r\n \r\n-  const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-  const stateCode = get('administrative_area_level_1', true);\r\n-  const countryName = get('country');\r\n-  const countryCode = get('country', true);\r\n-  const name = place.name !== cityName ? place.name : null;\r\n+  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n+    const components = place.address_components;\r\n+    console.log('components', components);\r\n \r\n-  const coords = place.geometry?.location;\r\n+    const get = (type: string, short = false) =>\r\n+      components?.find((c) => c.types.includes(type))?.[short ? 'short_name' : 'long_name'];\r\n \r\n-  return {\r\n-    name,\r\n-    cityName,\r\n-    stateCode,\r\n-    countryName,\r\n-    countryCode,\r\n-    coordinates: {\r\n-      latitude: coords?.lat() ?? 0,\r\n-      longitude: coords?.lng() ?? 0,\r\n-    },\r\n-  };\r\n-}\r\n+    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n+    const stateCode = get('administrative_area_level_1', true);\r\n+    const countryName = get('country');\r\n+    const countryCode = get('country', true);\r\n+    const postalCode = get('postal_code');\r\n+    const district = get('administrative_area_level_3');\r\n \r\n+    const name = place.name !== cityName ? place.name : null;\r\n+    const coords = place.geometry?.location;\r\n \r\n+    return {\r\n+      name,\r\n+      cityName,\r\n+      stateCode,\r\n+      countryName,\r\n+      countryCode,\r\n+      postalCode,\r\n+      district,\r\n+      coordinates: {\r\n+        latitude: coords?.lat() ?? 0,\r\n+        longitude: coords?.lng() ?? 0,\r\n+      },\r\n+    };\r\n+  }\r\n \r\n \r\n+\r\n+\r\n   pin(color: string) {\r\n     return {\r\n       path: google.maps.SymbolPath.CIRCLE,\r\n       fillColor: color,\r\n"
                },
                {
                    "date": 1751086915957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n     const location = place.geometry.location;\r\n \r\n     this.map.setCenter(location);\r\n \r\n-    const color = this.colors[this.colorIndex++ % this.colors.length];\r\n+     const color = colors[colorIndex++ % colors.length];\r\n     const marker = new google.maps.Marker({\r\n       position: location,\r\n       map: this.map,\r\n       icon: this.pin(color),\r\n"
                },
                {
                    "date": 1751087668587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,10 @@\n     const parsedLocation = this.locationFromPlace(place);\r\n     console.log('parsedLocation', parsedLocation);\r\n \r\n     this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n+\r\n+    console.log('entries'this.entries)\r\n     this.locationSelected.emit(parsedLocation);\r\n   }\r\n \r\n   locationFromPlace(place: google.maps.places.PlaceResult) {\r\n"
                },
                {
                    "date": 1751087680903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n     console.log('parsedLocation', parsedLocation);\r\n \r\n     this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n \r\n-    console.log('entries'this.entries)\r\n+    console.log('entries',this.entries)\r\n     this.locationSelected.emit(parsedLocation);\r\n   }\r\n \r\n   locationFromPlace(place: google.maps.places.PlaceResult) {\r\n"
                },
                {
                    "date": 1751087769950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,24 @@\n   @Output() locationSelected = new EventEmitter<any>();\r\n \r\n \r\n   private map!: google.maps.Map;\r\n-entries:any\r\n+  public entries: Array<{\r\n+    place: google.maps.places.PlaceResult;\r\n+    marker: google.maps.Marker;\r\n+    color: string;\r\n+    location: {\r\n+      name: string | null | undefined;\r\n+      cityName: string | undefined;\r\n+      stateCode: string | undefined;\r\n+      countryName: string | undefined;\r\n+      countryCode: string | undefined;\r\n+      coordinates: {\r\n+        latitude: number;\r\n+        longitude: number;\r\n+      };\r\n+    };\r\n+  }> = [];\r\n   constructor(apiService: ApiService, private ngZone: NgZone) {\r\n \r\n       apiService.load().then(maps => {\r\n     console.log('Google Maps loaded!', maps);\r\n"
                },
                {
                    "date": 1751092150446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,10 @@\n   NgZone,\r\n   Output,\r\n   EventEmitter,\r\n } from '@angular/core';\r\n-import * as turf from '@turf/turf';\r\n-import * as geolib from 'geolib';\r\n \r\n+\r\n import { ApiService, Maps } from '../services/api.service';\r\n \r\n const colors = ['red', 'blue', 'green', 'yellow'];\r\n let colorIndex = 0;\r\n"
                },
                {
                    "date": 1751739793869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,132 +49,7 @@\n ],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n-export class TestComponent  {\r\n-  @ViewChild('search') searchElementRef!: ElementRef;\r\n-  @ViewChild('map') mapElementRef!: ElementRef;\r\n-  @Output() locationSelected = new EventEmitter<any>();\r\n-\r\n-\r\n-  private map!: google.maps.Map;\r\n-  public entries: Array<{\r\n-    place: google.maps.places.PlaceResult;\r\n-    marker: google.maps.Marker;\r\n-    color: string;\r\n-    location: {\r\n-      name: string | null | undefined;\r\n-      cityName: string | undefined;\r\n-      stateCode: string | undefined;\r\n-      countryName: string | undefined;\r\n-      countryCode: string | undefined;\r\n-      coordinates: {\r\n-        latitude: number;\r\n-        longitude: number;\r\n-      };\r\n-    };\r\n-  }> = [];\r\n-  constructor(apiService: ApiService, private ngZone: NgZone) {\r\n-\r\n-      apiService.load().then(maps => {\r\n-    console.log('Google Maps loaded!', maps);\r\n-          this.initAutocomplete(maps);\r\n-      this.initMap(maps);\r\n-  }).catch(err => console.error(err));\r\n-  }\r\n-\r\n-  initAutocomplete(maps: Maps) {\r\n-    const autocomplete = new maps.places.Autocomplete(\r\n-      this.searchElementRef.nativeElement\r\n-    );\r\n-    autocomplete.addListener('place_changed', () => {\r\n-\r\n-      console.log('test')\r\n-      this.ngZone.run(() => {\r\n-        this.onPlaceChange(autocomplete.getPlace());\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  initMap(maps: Maps) {\r\n-    this.map = new maps.Map(this.mapElementRef.nativeElement, {\r\n-      zoom: 6,\r\n-      center: { lat: 20.5937, lng: 78.9629 }, // Center on India\r\n-    });\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n- onPlaceChange(place: google.maps.places.PlaceResult) {\r\n-    if (!place.geometry || !place.geometry.location) {\r\n-      console.error('Invalid place result: missing geometry');\r\n-      return;\r\n-    }\r\n-\r\n-    const location = place.geometry.location;\r\n-\r\n-    this.map.setCenter(location);\r\n-\r\n-     const color = colors[colorIndex++ % colors.length];\r\n-    const marker = new google.maps.Marker({\r\n-      position: location,\r\n-      map: this.map,\r\n-      icon: this.pin(color),\r\n-    });\r\n-\r\n-    const parsedLocation = this.locationFromPlace(place);\r\n-    console.log('parsedLocation', parsedLocation);\r\n-\r\n-    this.entries.unshift({ place, marker, color, location: parsedLocation });\r\n-\r\n-    console.log('entries',this.entries)\r\n-    this.locationSelected.emit(parsedLocation);\r\n-  }\r\n-\r\n-  locationFromPlace(place: google.maps.places.PlaceResult) {\r\n-    const components = place.address_components;\r\n-    console.log('components', components);\r\n-\r\n-    const get = (type: string, short = false) =>\r\n-      components?.find((c) => c.types.includes(type))?.[short ? 'short_name' : 'long_name'];\r\n-\r\n-    const cityName = get('locality') || get('administrative_area_level_3', true);\r\n-    const stateCode = get('administrative_area_level_1', true);\r\n-    const countryName = get('country');\r\n-    const countryCode = get('country', true);\r\n-    const postalCode = get('postal_code');\r\n-    const district = get('administrative_area_level_3');\r\n-\r\n-    const name = place.name !== cityName ? place.name : null;\r\n-    const coords = place.geometry?.location;\r\n-\r\n-    return {\r\n-      name,\r\n-      cityName,\r\n-      stateCode,\r\n-      countryName,\r\n-      countryCode,\r\n-      postalCode,\r\n-      district,\r\n-      coordinates: {\r\n-        latitude: coords?.lat() ?? 0,\r\n-        longitude: coords?.lng() ?? 0,\r\n-      },\r\n-    };\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-  pin(color: string) {\r\n-    return {\r\n-      path: google.maps.SymbolPath.CIRCLE,\r\n-      fillColor: color,\r\n-      fillOpacity: 1,\r\n-      strokeWeight: 1,\r\n-      scale: 7,\r\n-    };\r\n-  }\r\n-\r\n-\r\n-}\r\n+export class TestComponent{\r\n+  \r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751739824098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,47 +6,13 @@\n   Output,\r\n   EventEmitter,\r\n } from '@angular/core';\r\n \r\n-\r\n-import { ApiService, Maps } from '../services/api.service';\r\n-\r\n-const colors = ['red', 'blue', 'green', 'yellow'];\r\n-let colorIndex = 0;\r\n-import { NgFor, NgIf } from '@angular/common';\r\n-import { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\r\n-import { MatIconModule } from '@angular/material/icon';\r\n-import { MatCardModule } from '@angular/material/card';\r\n-import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatInputModule } from '@angular/material/input';\r\n-import { MatButtonModule } from '@angular/material/button';\r\n-import { MatExpansionModule } from '@angular/material/expansion';\r\n-import { MatChipsModule } from '@angular/material/chips';\r\n-import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n-import { MatSelectModule } from '@angular/material/select';\r\n-import { MatDividerModule } from '@angular/material/divider';\r\n-import { AddProductComponent } from \"../COMPONENTS/add-product/add-product.component\";\r\n-import { ReactiveFormsModule } from '@angular/forms';\r\n-\r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n   imports: [\r\n-    ReactiveFormsModule,\r\n-    NgFor,\r\n-    NgIf,\r\n-    MatTabsModule,\r\n-    MatCardModule,\r\n-    MatIconModule,\r\n-    MatFormFieldModule,\r\n-    MatInputModule,\r\n-    MatButtonModule,\r\n-    MatExpansionModule,\r\n-    MatChipsModule,\r\n-    MatAutocompleteModule,\r\n-    MatSelectModule,\r\n-    MatDividerModule,\r\n-    AddProductComponent\r\n+\r\n ],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n"
                },
                {
                    "date": 1751739834706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,6 @@\n import {\r\n   Component,\r\n-  ElementRef,\r\n-  ViewChild,\r\n-  NgZone,\r\n-  Output,\r\n-  EventEmitter,\r\n } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n"
                },
                {
                    "date": 1751739845105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,10 @@\n-import {\r\n-  Component,\r\n-} from '@angular/core';\r\n+import { Component } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-test',\r\n   standalone: true,\r\n-  imports: [\r\n-\r\n-],\r\n+  imports: [],\r\n   templateUrl: './test.component.html',\r\n   styleUrl: './test.component.scss',\r\n })\r\n-export class TestComponent{\r\n\\ No newline at end of file\n-  \r\n-}\n+export class TestComponent {}\r\n"
                }
            ],
            "date": 1749784341955,
            "name": "Commit-0",
            "content": "import { HttpClient } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormArray, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './test.component.html',\r\n  styleUrl: './test.component.scss'\r\n})\r\nexport class TestComponent  {\r\n  productForm: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) {\r\n    this.productForm = this.fb.group({\r\n      variants: this.fb.array([]),\r\n      images: this.fb.array([]),\r\n    });\r\n  }\r\n\r\n  // --------- Form Array Getters ---------\r\n  get variants(): FormArray {\r\n    return this.productForm.get('variants') as FormArray;\r\n  }\r\n\r\n  get images(): FormArray {\r\n    return this.productForm.get('images') as FormArray;\r\n  }\r\n\r\n  // --------- Add Variant ---------\r\n  addVariant() {\r\n    const variantGroup = this.fb.group({\r\n      variant_id: [0],\r\n      id: [0],\r\n      sku: [''],\r\n      size: [''],\r\n      color: [''],\r\n      image_id: [0],\r\n    });\r\n    this.variants.push(variantGroup);\r\n  }\r\n\r\n  // --------- Add Image ---------\r\n  addImage() {\r\n    const imageGroup = this.fb.group({\r\n      image_id: [0],\r\n      id: [0],\r\n      alt: [''],\r\n      src: [''],\r\n      variant_id: this.fb.array([]),\r\n    });\r\n    this.images.push(imageGroup);\r\n  }\r\n\r\n  // --------- Add Variant ID to Image ---------\r\n  addVariantIdToImage(imageIndex: number) {\r\n    const variantIdArray = this.images.at(imageIndex).get('variant_id') as FormArray;\r\n    variantIdArray.push(new FormControl(0)); // add default 0 or user value\r\n  }\r\n\r\n  // --------- Submit Form ---------\r\n  submit() {\r\n    const formData = this.productForm.value;\r\n\r\n    this.http.post('https://your-backend-api.com/api/products', formData)\r\n      .subscribe({\r\n        next: (res) => console.log('Submitted successfully', res),\r\n        error: (err) => console.error('Submission error', err),\r\n      });\r\n  }\r\n}"
        }
    ]
}