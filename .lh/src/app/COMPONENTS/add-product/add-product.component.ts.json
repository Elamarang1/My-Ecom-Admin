{
    "sourceFile": "src/app/COMPONENTS/add-product/add-product.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1749782917810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749783044532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,7 +195,12 @@\n   }\r\n \r\n \r\n   jsonTest(){\r\n-    \r\n+        if (this.productForm.valid) {\r\n+      console.log('Form Data:', this.productForm.value);\r\n+    } else {\r\n+      this.productForm.markAllAsTouched();\r\n+    }\r\n   }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1749783556935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,11 +196,14 @@\n \r\n \r\n   jsonTest(){\r\n         if (this.productForm.valid) {\r\n+          const  formData = this.productForm.value\r\n+\r\n+          formData.sale = true\r\n       console.log('Form Data:', this.productForm.value);\r\n     } else {\r\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n   }\r\n-}\r\n+\r\n"
                },
                {
                    "date": 1749985566695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,17 @@\n import {Observable} from 'rxjs';\r\n import {map, startWith} from 'rxjs/operators';\r\n import {AsyncPipe} from '@angular/common';\r\n import {MatAutocompleteModule} from '@angular/material/autocomplete';\r\n+import {MatButtonModule} from '@angular/material/button';\r\n+\r\n export interface Fruit {\r\n   name: string;\r\n }\r\n @Component({\r\n   selector: 'app-add-product',\r\n   standalone: true,\r\n-  imports: [MatFormFieldModule, MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n+  imports: [MatFormFieldModule, MatButtonModule,MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n   templateUrl: './add-product.component.html',\r\n   styleUrl: './add-product.component.scss'\r\n })\r\n export class AddProductComponent {\r\n"
                },
                {
                    "date": 1749999760416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,100 @@\n-import { ChangeDetectorRef, Component, ElementRef, inject, signal, ViewChild } from '@angular/core';\r\n+import {\r\n+  ChangeDetectorRef,\r\n+  Component,\r\n+  ElementRef,\r\n+  inject,\r\n+  signal,\r\n+  ViewChild,\r\n+} from '@angular/core';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatIconModule } from '@angular/material/icon'\r\n-import { NgFor } from '@angular/common';\r\n+import { MatIconModule } from '@angular/material/icon';\r\n+import { NgFor, NgIf } from '@angular/common';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n-import { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-import {MatChipEditedEvent, MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\r\n-import {COMMA, ENTER} from '@angular/cdk/keycodes';\r\n+import {\r\n+  FormBuilder,\r\n+  FormControl,\r\n+  FormGroup,\r\n+  ReactiveFormsModule,\r\n+  Validators,\r\n+} from '@angular/forms';\r\n+import {\r\n+  MatChipEditedEvent,\r\n+  MatChipInputEvent,\r\n+  MatChipsModule,\r\n+} from '@angular/material/chips';\r\n+import { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n import { LiveAnnouncer } from '@angular/cdk/a11y';\r\n-import {Observable} from 'rxjs';\r\n-import {map, startWith} from 'rxjs/operators';\r\n-import {AsyncPipe} from '@angular/common';\r\n-import {MatAutocompleteModule} from '@angular/material/autocomplete';\r\n-import {MatButtonModule} from '@angular/material/button';\r\n+import { Observable } from 'rxjs';\r\n+import { map, startWith } from 'rxjs/operators';\r\n+import { AsyncPipe } from '@angular/common';\r\n+import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n+import { MatCardModule } from '@angular/material/card';\r\n+import { MatTabsModule } from '@angular/material/tabs';\r\n \r\n export interface Fruit {\r\n   name: string;\r\n }\r\n @Component({\r\n   selector: 'app-add-product',\r\n   standalone: true,\r\n-  imports: [MatFormFieldModule, MatButtonModule,MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n+  imports: [\r\n+    MatFormFieldModule,\r\n+    MatButtonModule,\r\n+    MatInputModule,\r\n+    AsyncPipe,\r\n+    MatAutocompleteModule,\r\n+    MatInputModule,\r\n+    MatIconModule,\r\n+    MatChipsModule,\r\n+    MatIconModule,\r\n+    MatSelectModule,\r\n+    NgFor,\r\n+    MatExpansionModule,\r\n+    ReactiveFormsModule,\r\n+    MatCardModule,\r\n+    MatButtonModule,\r\n+    MatInputModule,\r\n+    MatFormFieldModule,\r\n+    NgFor,\r\n+    NgIf,\r\n+    MatTabsModule,\r\n+    MatIconModule,\r\n+  ],\r\n   templateUrl: './add-product.component.html',\r\n-  styleUrl: './add-product.component.scss'\r\n+  styleUrl: './add-product.component.scss',\r\n })\r\n export class AddProductComponent {\r\n   @ViewChild('fileInput') el!: ElementRef;\r\n-  imageUrl: any = [\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\"];\r\n-  registrationForm!: FormGroup\r\n+  imageUrl: any = [\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+  ];\r\n+  registrationForm!: FormGroup;\r\n   editFile: boolean = true;\r\n   removeUpload: boolean = false;\r\n-    readonly addOnBlur = true;\r\n+  readonly addOnBlur = true;\r\n   readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n-  readonly fruits = signal<any[]>([{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}]);\r\n+  readonly fruits = signal<any[]>([\r\n+    { name: 'Lemon' },\r\n+    { name: 'Lime' },\r\n+    { name: 'Apple' },\r\n+  ]);\r\n   readonly announcer = inject(LiveAnnouncer);\r\n   productForm!: FormGroup;\r\n-    myControl = new FormControl('');\r\n-        myControl1 = new FormControl('');\r\n+  myControl = new FormControl('');\r\n+  myControl1 = new FormControl('');\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n-  colors: string[] = ['yellow','white','pink','olive','navy','red']\r\n+  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n   filteredOptions!: Observable<string[]>;\r\n   filteredColors!: Observable<string[]>;\r\n   constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) {\r\n-this.productForm = this.fb.group({\r\n+    this.productForm = this.fb.group({\r\n       title: ['', Validators.required],\r\n       description: [''],\r\n       type: [''],\r\n       brand: [''],\r\n@@ -52,9 +102,9 @@\n       category: [''],\r\n       price: [''],\r\n       discount: [''],\r\n       stock: [''],\r\n-      newProduct: [false]\r\n+      newProduct: [false],\r\n     });\r\n   }\r\n \r\n   typeArray = [\r\n@@ -70,27 +120,27 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ]\r\n+  ];\r\n \r\n   brandArray = [\r\n     { key: 'Nike', value: 'nike' },\r\n     { key: 'Zara', value: 'zara' },\r\n     { key: 'Denim', value: 'denim' },\r\n     { key: 'Madame', value: 'madame' },\r\n     { key: 'Biba', value: 'biba' },\r\n     { key: 'Max', value: 'max' },\r\n-  ]\r\n+  ];\r\n \r\n   collectionArray = [\r\n     { key: 'New products', value: 'new products' },\r\n     { key: 'Best sellers', value: 'best sellers' },\r\n     { key: 'Featured products', value: 'featured products' },\r\n     { key: 'On sale', value: 'on sale' },\r\n     { key: 'New arrival', value: 'new arrival' },\r\n     { key: 'Trending product', value: 'trending product' },\r\n-  ]\r\n+  ];\r\n   categoryArray = [\r\n     { key: 'Fashion', value: 'Women' },\r\n     { key: 'Shoes', value: 'shoes' },\r\n     { key: 'Bags', value: 'bags' },\r\n@@ -103,32 +153,36 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ]\r\n+  ];\r\n \r\n-    ngOnInit() {\r\n+  ngOnInit() {\r\n     this.filteredOptions = this.myControl.valueChanges.pipe(\r\n       startWith(''),\r\n-      map(value => this._filter(value || '')),\r\n+      map((value) => this._filter(value || ''))\r\n     );\r\n \r\n-        this.filteredColors = this.myControl1.valueChanges.pipe(\r\n+    this.filteredColors = this.myControl1.valueChanges.pipe(\r\n       startWith(''),\r\n-      map(value => this._filter1(value || '')),\r\n+      map((value) => this._filter1(value || ''))\r\n     );\r\n   }\r\n \r\n   private _filter(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n+    return this.options.filter((option) =>\r\n+      option.toLowerCase().includes(filterValue)\r\n+    );\r\n   }\r\n \r\n-    private _filter1(value: string): string[] {\r\n+  private _filter1(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.colors.filter(option => option.toLowerCase().includes(filterValue));\r\n+    return this.colors.filter((option) =>\r\n+      option.toLowerCase().includes(filterValue)\r\n+    );\r\n   }\r\n \r\n   uploadFile(event: any) {\r\n     let reader = new FileReader(); // HTML5 FileReader API\r\n@@ -139,33 +193,32 @@\n       // When file uploads set it to file formcontrol\r\n       reader.onload = () => {\r\n         this.imageUrl = reader.result;\r\n         this.registrationForm.patchValue({\r\n-          file: reader.result\r\n+          file: reader.result,\r\n         });\r\n         this.editFile = false;\r\n         this.removeUpload = true;\r\n-      }\r\n+      };\r\n       // ChangeDetectorRef since file is loading outside the zone\r\n       this.cd.markForCheck();\r\n     }\r\n   }\r\n \r\n-\r\n-   add(event: MatChipInputEvent): void {\r\n+  add(event: MatChipInputEvent): void {\r\n     const value = (event.value || '').trim();\r\n \r\n     // Add our fruit\r\n     if (value) {\r\n-      this.fruits.update(fruits => [...fruits, {name: value}]);\r\n+      this.fruits.update((fruits) => [...fruits, { name: value }]);\r\n     }\r\n \r\n     // Clear the input value\r\n     event.chipInput!.clear();\r\n   }\r\n \r\n   remove(fruit: Fruit): void {\r\n-    this.fruits.update(fruits => {\r\n+    this.fruits.update((fruits) => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index < 0) {\r\n         return fruits;\r\n       }\r\n@@ -185,9 +238,9 @@\n       return;\r\n     }\r\n \r\n     // Edit existing fruit\r\n-    this.fruits.update(fruits => {\r\n+    this.fruits.update((fruits) => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index >= 0) {\r\n         fruits[index].name = value;\r\n         return [...fruits];\r\n@@ -195,17 +248,15 @@\n       return fruits;\r\n     });\r\n   }\r\n \r\n+  jsonTest() {\r\n+    if (this.productForm.valid) {\r\n+      const formData = this.productForm.value;\r\n \r\n-  jsonTest(){\r\n-        if (this.productForm.valid) {\r\n-          const  formData = this.productForm.value\r\n-\r\n-          formData.sale = true\r\n+      formData.sale = true;\r\n       console.log('Form Data:', this.productForm.value);\r\n     } else {\r\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n-  }\r\n-\r\n+}\r\n"
                },
                {
                    "date": 1749999881426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { MatIconModule } from '@angular/material/icon';\r\n import { NgFor, NgIf } from '@angular/common';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n import {\r\n+  FormArray,\r\n   FormBuilder,\r\n   FormControl,\r\n   FormGroup,\r\n   ReactiveFormsModule,\r\n@@ -167,8 +168,85 @@\n       map((value) => this._filter1(value || ''))\r\n     );\r\n   }\r\n \r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  \r\n+    get imageDetails(): FormArray {\r\n+      return this.productForm.get('images Details') as FormArray;\r\n+    }\r\n+  \r\n+    newImage(): FormGroup {\r\n+      return this.fb.group({\r\n+        alt: ['', Validators.required],\r\n+        src: ['', Validators.required], // base64 string\r\n+        preview: [''], // for image preview (not submitted)\r\n+        'variant Details': this.fb.array([this.newVariant()])\r\n+      });\r\n+    }\r\n+  \r\n+    newVariant(): FormGroup {\r\n+      return this.fb.group({\r\n+        sku: ['', Validators.required],\r\n+        size: ['', Validators.required],\r\n+        color: ['', Validators.required]\r\n+      });\r\n+    }\r\n+  \r\n+    addImage() {\r\n+      this.imageDetails.push(this.newImage());\r\n+    }\r\n+  \r\n+    removeImage(index: number) {\r\n+      this.imageDetails.removeAt(index);\r\n+    }\r\n+  \r\n+    getVariants(imageIndex: number): FormArray {\r\n+      return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n+    }\r\n+  \r\n+    addVariant(imageIndex: number) {\r\n+      this.getVariants(imageIndex).push(this.newVariant());\r\n+    }\r\n+  \r\n+    removeVariant(imageIndex: number, variantIndex: number) {\r\n+      this.getVariants(imageIndex).removeAt(variantIndex);\r\n+    }\r\n+  \r\n+    async onFileChange(event: any, imageIndex: number) {\r\n+      const file = event.target.files[0];\r\n+      if (file) {\r\n+        const base64 = await this.convertToBase64(file);\r\n+        const group = this.imageDetails.at(imageIndex);\r\n+        group.patchValue({ src: base64, preview: base64 });\r\n+      }\r\n+    }\r\n+  \r\n+    convertToBase64(file: File): Promise<string> {\r\n+      return new Promise((resolve, reject) => {\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        reader.onload = () => resolve(reader.result as string);\r\n+        reader.onerror = error => reject(error);\r\n+      });\r\n+    }\r\n+  \r\n+    onSubmit() {\r\n+      const data = JSON.parse(JSON.stringify(this.productForm.value));\r\n+      // remove preview field before submit\r\n+      data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n+      console.log('Final Payload:', data);\r\n+      // You can now POST this to API\r\n+    }\r\n+\r\n+\r\n+\r\n+    \r\n+\r\n   private _filter(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n     return this.options.filter((option) =>\r\n"
                },
                {
                    "date": 1750000241763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,13 @@\n       discount: [''],\r\n       stock: [''],\r\n       newProduct: [false],\r\n     });\r\n+\r\n+        this.productForm = this.fb.group({\r\n+      'images Details': this.fb.array([]) // Note: key with space\r\n+    });\r\n+    this.addImage(); // One initial image\r\n   }\r\n \r\n   typeArray = [\r\n     { key: 'Fashion', value: 'fashion' },\r\n"
                },
                {
                    "date": 1750000737739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     { name: 'Lime' },\r\n     { name: 'Apple' },\r\n   ]);\r\n   readonly announcer = inject(LiveAnnouncer);\r\n-  productForm!: FormGroup;\r\n+  productForm: FormGroup;\r\n   myControl = new FormControl('');\r\n   myControl1 = new FormControl('');\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n"
                },
                {
                    "date": 1750001126661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n     { name: 'Apple' },\r\n   ]);\r\n   readonly announcer = inject(LiveAnnouncer);\r\n   productForm: FormGroup;\r\n+    productForm1!: FormGroup;\r\n   myControl = new FormControl('');\r\n   myControl1 = new FormControl('');\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n"
                },
                {
                    "date": 1750001139846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n \r\n \r\n   \r\n     get imageDetails(): FormArray {\r\n-      return this.productForm.get('images Details') as FormArray;\r\n+      return this.productForm1.get('images Details') as FormArray;\r\n     }\r\n   \r\n     newImage(): FormGroup {\r\n       return this.fb.group({\r\n"
                },
                {
                    "date": 1750001215160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,102 +1,48 @@\n-import {\r\n-  ChangeDetectorRef,\r\n-  Component,\r\n-  ElementRef,\r\n-  inject,\r\n-  signal,\r\n-  ViewChild,\r\n-} from '@angular/core';\r\n+import { ChangeDetectorRef, Component, ElementRef, inject, signal, ViewChild } from '@angular/core';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatIconModule } from '@angular/material/icon';\r\n-import { NgFor, NgIf } from '@angular/common';\r\n+import { MatIconModule } from '@angular/material/icon'\r\n+import { NgFor } from '@angular/common';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n-import {\r\n-  FormArray,\r\n-  FormBuilder,\r\n-  FormControl,\r\n-  FormGroup,\r\n-  ReactiveFormsModule,\r\n-  Validators,\r\n-} from '@angular/forms';\r\n-import {\r\n-  MatChipEditedEvent,\r\n-  MatChipInputEvent,\r\n-  MatChipsModule,\r\n-} from '@angular/material/chips';\r\n-import { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n+import { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n+import {MatChipEditedEvent, MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\r\n+import {COMMA, ENTER} from '@angular/cdk/keycodes';\r\n import { LiveAnnouncer } from '@angular/cdk/a11y';\r\n-import { Observable } from 'rxjs';\r\n-import { map, startWith } from 'rxjs/operators';\r\n-import { AsyncPipe } from '@angular/common';\r\n-import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n-import { MatButtonModule } from '@angular/material/button';\r\n-import { MatCardModule } from '@angular/material/card';\r\n-import { MatTabsModule } from '@angular/material/tabs';\r\n-\r\n+import {Observable} from 'rxjs';\r\n+import {map, startWith} from 'rxjs/operators';\r\n+import {AsyncPipe} from '@angular/common';\r\n+import {MatAutocompleteModule} from '@angular/material/autocomplete';\r\n export interface Fruit {\r\n   name: string;\r\n }\r\n @Component({\r\n   selector: 'app-add-product',\r\n   standalone: true,\r\n-  imports: [\r\n-    MatFormFieldModule,\r\n-    MatButtonModule,\r\n-    MatInputModule,\r\n-    AsyncPipe,\r\n-    MatAutocompleteModule,\r\n-    MatInputModule,\r\n-    MatIconModule,\r\n-    MatChipsModule,\r\n-    MatIconModule,\r\n-    MatSelectModule,\r\n-    NgFor,\r\n-    MatExpansionModule,\r\n-    ReactiveFormsModule,\r\n-    MatCardModule,\r\n-    MatButtonModule,\r\n-    MatInputModule,\r\n-    MatFormFieldModule,\r\n-    NgFor,\r\n-    NgIf,\r\n-    MatTabsModule,\r\n-    MatIconModule,\r\n-  ],\r\n+  imports: [MatFormFieldModule, MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n   templateUrl: './add-product.component.html',\r\n-  styleUrl: './add-product.component.scss',\r\n+  styleUrl: './add-product.component.scss'\r\n })\r\n export class AddProductComponent {\r\n   @ViewChild('fileInput') el!: ElementRef;\r\n-  imageUrl: any = [\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-    '../../../assts/add-img.webp',\r\n-  ];\r\n-  registrationForm!: FormGroup;\r\n+  imageUrl: any = [\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\"];\r\n+  registrationForm!: FormGroup\r\n   editFile: boolean = true;\r\n   removeUpload: boolean = false;\r\n-  readonly addOnBlur = true;\r\n+    readonly addOnBlur = true;\r\n   readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n-  readonly fruits = signal<any[]>([\r\n-    { name: 'Lemon' },\r\n-    { name: 'Lime' },\r\n-    { name: 'Apple' },\r\n-  ]);\r\n+  readonly fruits = signal<any[]>([{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}]);\r\n   readonly announcer = inject(LiveAnnouncer);\r\n-  productForm: FormGroup;\r\n-    productForm1!: FormGroup;\r\n-  myControl = new FormControl('');\r\n-  myControl1 = new FormControl('');\r\n+  productForm!: FormGroup;\r\n+    myControl = new FormControl('');\r\n+        myControl1 = new FormControl('');\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n-  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n+  colors: string[] = ['yellow','white','pink','olive','navy','red']\r\n   filteredOptions!: Observable<string[]>;\r\n   filteredColors!: Observable<string[]>;\r\n   constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) {\r\n-    this.productForm = this.fb.group({\r\n+this.productForm = this.fb.group({\r\n       title: ['', Validators.required],\r\n       description: [''],\r\n       type: [''],\r\n       brand: [''],\r\n@@ -104,15 +50,10 @@\n       category: [''],\r\n       price: [''],\r\n       discount: [''],\r\n       stock: [''],\r\n-      newProduct: [false],\r\n+      newProduct: [false]\r\n     });\r\n-\r\n-        this.productForm = this.fb.group({\r\n-      'images Details': this.fb.array([]) // Note: key with space\r\n-    });\r\n-    this.addImage(); // One initial image\r\n   }\r\n \r\n   typeArray = [\r\n     { key: 'Fashion', value: 'fashion' },\r\n@@ -127,27 +68,27 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n+  ]\r\n \r\n   brandArray = [\r\n     { key: 'Nike', value: 'nike' },\r\n     { key: 'Zara', value: 'zara' },\r\n     { key: 'Denim', value: 'denim' },\r\n     { key: 'Madame', value: 'madame' },\r\n     { key: 'Biba', value: 'biba' },\r\n     { key: 'Max', value: 'max' },\r\n-  ];\r\n+  ]\r\n \r\n   collectionArray = [\r\n     { key: 'New products', value: 'new products' },\r\n     { key: 'Best sellers', value: 'best sellers' },\r\n     { key: 'Featured products', value: 'featured products' },\r\n     { key: 'On sale', value: 'on sale' },\r\n     { key: 'New arrival', value: 'new arrival' },\r\n     { key: 'Trending product', value: 'trending product' },\r\n-  ];\r\n+  ]\r\n   categoryArray = [\r\n     { key: 'Fashion', value: 'Women' },\r\n     { key: 'Shoes', value: 'shoes' },\r\n     { key: 'Bags', value: 'bags' },\r\n@@ -160,113 +101,32 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ];\r\n+  ]\r\n \r\n-  ngOnInit() {\r\n+    ngOnInit() {\r\n     this.filteredOptions = this.myControl.valueChanges.pipe(\r\n       startWith(''),\r\n-      map((value) => this._filter(value || ''))\r\n+      map(value => this._filter(value || '')),\r\n     );\r\n \r\n-    this.filteredColors = this.myControl1.valueChanges.pipe(\r\n+        this.filteredColors = this.myControl1.valueChanges.pipe(\r\n       startWith(''),\r\n-      map((value) => this._filter1(value || ''))\r\n+      map(value => this._filter1(value || '')),\r\n     );\r\n   }\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-  \r\n-    get imageDetails(): FormArray {\r\n-      return this.productForm1.get('images Details') as FormArray;\r\n-    }\r\n-  \r\n-    newImage(): FormGroup {\r\n-      return this.fb.group({\r\n-        alt: ['', Validators.required],\r\n-        src: ['', Validators.required], // base64 string\r\n-        preview: [''], // for image preview (not submitted)\r\n-        'variant Details': this.fb.array([this.newVariant()])\r\n-      });\r\n-    }\r\n-  \r\n-    newVariant(): FormGroup {\r\n-      return this.fb.group({\r\n-        sku: ['', Validators.required],\r\n-        size: ['', Validators.required],\r\n-        color: ['', Validators.required]\r\n-      });\r\n-    }\r\n-  \r\n-    addImage() {\r\n-      this.imageDetails.push(this.newImage());\r\n-    }\r\n-  \r\n-    removeImage(index: number) {\r\n-      this.imageDetails.removeAt(index);\r\n-    }\r\n-  \r\n-    getVariants(imageIndex: number): FormArray {\r\n-      return this.imageDetails.at(imageIndex).get('variant Details') as FormArray;\r\n-    }\r\n-  \r\n-    addVariant(imageIndex: number) {\r\n-      this.getVariants(imageIndex).push(this.newVariant());\r\n-    }\r\n-  \r\n-    removeVariant(imageIndex: number, variantIndex: number) {\r\n-      this.getVariants(imageIndex).removeAt(variantIndex);\r\n-    }\r\n-  \r\n-    async onFileChange(event: any, imageIndex: number) {\r\n-      const file = event.target.files[0];\r\n-      if (file) {\r\n-        const base64 = await this.convertToBase64(file);\r\n-        const group = this.imageDetails.at(imageIndex);\r\n-        group.patchValue({ src: base64, preview: base64 });\r\n-      }\r\n-    }\r\n-  \r\n-    convertToBase64(file: File): Promise<string> {\r\n-      return new Promise((resolve, reject) => {\r\n-        const reader = new FileReader();\r\n-        reader.readAsDataURL(file);\r\n-        reader.onload = () => resolve(reader.result as string);\r\n-        reader.onerror = error => reject(error);\r\n-      });\r\n-    }\r\n-  \r\n-    onSubmit() {\r\n-      const data = JSON.parse(JSON.stringify(this.productForm.value));\r\n-      // remove preview field before submit\r\n-      data[\"images Details\"].forEach((img: any) => delete img.preview);\r\n-      console.log('Final Payload:', data);\r\n-      // You can now POST this to API\r\n-    }\r\n-\r\n-\r\n-\r\n-    \r\n-\r\n   private _filter(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.options.filter((option) =>\r\n-      option.toLowerCase().includes(filterValue)\r\n-    );\r\n+    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n   }\r\n \r\n-  private _filter1(value: string): string[] {\r\n+    private _filter1(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.colors.filter((option) =>\r\n-      option.toLowerCase().includes(filterValue)\r\n-    );\r\n+    return this.colors.filter(option => option.toLowerCase().includes(filterValue));\r\n   }\r\n \r\n   uploadFile(event: any) {\r\n     let reader = new FileReader(); // HTML5 FileReader API\r\n@@ -277,32 +137,33 @@\n       // When file uploads set it to file formcontrol\r\n       reader.onload = () => {\r\n         this.imageUrl = reader.result;\r\n         this.registrationForm.patchValue({\r\n-          file: reader.result,\r\n+          file: reader.result\r\n         });\r\n         this.editFile = false;\r\n         this.removeUpload = true;\r\n-      };\r\n+      }\r\n       // ChangeDetectorRef since file is loading outside the zone\r\n       this.cd.markForCheck();\r\n     }\r\n   }\r\n \r\n-  add(event: MatChipInputEvent): void {\r\n+\r\n+   add(event: MatChipInputEvent): void {\r\n     const value = (event.value || '').trim();\r\n \r\n     // Add our fruit\r\n     if (value) {\r\n-      this.fruits.update((fruits) => [...fruits, { name: value }]);\r\n+      this.fruits.update(fruits => [...fruits, {name: value}]);\r\n     }\r\n \r\n     // Clear the input value\r\n     event.chipInput!.clear();\r\n   }\r\n \r\n   remove(fruit: Fruit): void {\r\n-    this.fruits.update((fruits) => {\r\n+    this.fruits.update(fruits => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index < 0) {\r\n         return fruits;\r\n       }\r\n@@ -322,9 +183,9 @@\n       return;\r\n     }\r\n \r\n     // Edit existing fruit\r\n-    this.fruits.update((fruits) => {\r\n+    this.fruits.update(fruits => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index >= 0) {\r\n         fruits[index].name = value;\r\n         return [...fruits];\r\n@@ -332,15 +193,17 @@\n       return fruits;\r\n     });\r\n   }\r\n \r\n-  jsonTest() {\r\n-    if (this.productForm.valid) {\r\n-      const formData = this.productForm.value;\r\n \r\n-      formData.sale = true;\r\n+  jsonTest(){\r\n+        if (this.productForm.valid) {\r\n+          const  formData = this.productForm.value\r\n+\r\n+          formData.sale = true\r\n       console.log('Form Data:', this.productForm.value);\r\n     } else {\r\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n-}\r\n+  }\r\n+\r\n"
                },
                {
                    "date": 1750001345714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,91 @@\n-import { ChangeDetectorRef, Component, ElementRef, inject, signal, ViewChild } from '@angular/core';\r\n+import {\r\n+  ChangeDetectorRef,\r\n+  Component,\r\n+  ElementRef,\r\n+  inject,\r\n+  signal,\r\n+  ViewChild,\r\n+} from '@angular/core';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatIconModule } from '@angular/material/icon'\r\n+import { MatIconModule } from '@angular/material/icon';\r\n import { NgFor } from '@angular/common';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n-import { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-import {MatChipEditedEvent, MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\r\n-import {COMMA, ENTER} from '@angular/cdk/keycodes';\r\n+import {\r\n+  FormBuilder,\r\n+  FormControl,\r\n+  FormGroup,\r\n+  ReactiveFormsModule,\r\n+  Validators,\r\n+} from '@angular/forms';\r\n+import {\r\n+  MatChipEditedEvent,\r\n+  MatChipInputEvent,\r\n+  MatChipsModule,\r\n+} from '@angular/material/chips';\r\n+import { COMMA, ENTER } from '@angular/cdk/keycodes';\r\n import { LiveAnnouncer } from '@angular/cdk/a11y';\r\n-import {Observable} from 'rxjs';\r\n-import {map, startWith} from 'rxjs/operators';\r\n-import {AsyncPipe} from '@angular/common';\r\n-import {MatAutocompleteModule} from '@angular/material/autocomplete';\r\n+import { Observable } from 'rxjs';\r\n+import { map, startWith } from 'rxjs/operators';\r\n+import { AsyncPipe } from '@angular/common';\r\n+import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n+\r\n export interface Fruit {\r\n   name: string;\r\n }\r\n @Component({\r\n   selector: 'app-add-product',\r\n   standalone: true,\r\n-  imports: [MatFormFieldModule, MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n+  imports: [\r\n+    MatFormFieldModule,\r\n+    MatButtonModule,\r\n+    MatInputModule,\r\n+    AsyncPipe,\r\n+    MatAutocompleteModule,\r\n+    MatInputModule,\r\n+    MatIconModule,\r\n+    MatChipsModule,\r\n+    MatIconModule,\r\n+    MatSelectModule,\r\n+    NgFor,\r\n+    MatExpansionModule,\r\n+    ReactiveFormsModule,\r\n+    \r\n+  ],\r\n   templateUrl: './add-product.component.html',\r\n-  styleUrl: './add-product.component.scss'\r\n+  styleUrl: './add-product.component.scss',\r\n })\r\n export class AddProductComponent {\r\n   @ViewChild('fileInput') el!: ElementRef;\r\n-  imageUrl: any = [\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\"];\r\n-  registrationForm!: FormGroup\r\n+  imageUrl: any = [\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+    '../../../assts/add-img.webp',\r\n+  ];\r\n+  registrationForm!: FormGroup;\r\n   editFile: boolean = true;\r\n   removeUpload: boolean = false;\r\n-    readonly addOnBlur = true;\r\n+  readonly addOnBlur = true;\r\n   readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n-  readonly fruits = signal<any[]>([{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}]);\r\n+  readonly fruits = signal<any[]>([\r\n+    { name: 'Lemon' },\r\n+    { name: 'Lime' },\r\n+    { name: 'Apple' },\r\n+  ]);\r\n   readonly announcer = inject(LiveAnnouncer);\r\n   productForm!: FormGroup;\r\n-    myControl = new FormControl('');\r\n-        myControl1 = new FormControl('');\r\n+  myControl = new FormControl('');\r\n+  myControl1 = new FormControl('');\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n-  colors: string[] = ['yellow','white','pink','olive','navy','red']\r\n+  colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n   filteredOptions!: Observable<string[]>;\r\n   filteredColors!: Observable<string[]>;\r\n   constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) {\r\n-this.productForm = this.fb.group({\r\n+    this.productForm = this.fb.group({\r\n       title: ['', Validators.required],\r\n       description: [''],\r\n       type: [''],\r\n       brand: [''],\r\n@@ -50,9 +93,9 @@\n       category: [''],\r\n       price: [''],\r\n       discount: [''],\r\n       stock: [''],\r\n-      newProduct: [false]\r\n+      newProduct: [false],\r\n     });\r\n   }\r\n \r\n   typeArray = [\r\n@@ -68,27 +111,27 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ]\r\n+  ];\r\n \r\n   brandArray = [\r\n     { key: 'Nike', value: 'nike' },\r\n     { key: 'Zara', value: 'zara' },\r\n     { key: 'Denim', value: 'denim' },\r\n     { key: 'Madame', value: 'madame' },\r\n     { key: 'Biba', value: 'biba' },\r\n     { key: 'Max', value: 'max' },\r\n-  ]\r\n+  ];\r\n \r\n   collectionArray = [\r\n     { key: 'New products', value: 'new products' },\r\n     { key: 'Best sellers', value: 'best sellers' },\r\n     { key: 'Featured products', value: 'featured products' },\r\n     { key: 'On sale', value: 'on sale' },\r\n     { key: 'New arrival', value: 'new arrival' },\r\n     { key: 'Trending product', value: 'trending product' },\r\n-  ]\r\n+  ];\r\n   categoryArray = [\r\n     { key: 'Fashion', value: 'Women' },\r\n     { key: 'Shoes', value: 'shoes' },\r\n     { key: 'Bags', value: 'bags' },\r\n@@ -101,32 +144,36 @@\n     { key: 'Beauty', value: 'beauty' },\r\n     { key: 'Tools', value: 'tools' },\r\n     { key: 'Gym', value: 'gym' },\r\n     { key: 'Marijuana', value: 'marijuana' },\r\n-  ]\r\n+  ];\r\n \r\n-    ngOnInit() {\r\n+  ngOnInit() {\r\n     this.filteredOptions = this.myControl.valueChanges.pipe(\r\n       startWith(''),\r\n-      map(value => this._filter(value || '')),\r\n+      map((value) => this._filter(value || ''))\r\n     );\r\n \r\n-        this.filteredColors = this.myControl1.valueChanges.pipe(\r\n+    this.filteredColors = this.myControl1.valueChanges.pipe(\r\n       startWith(''),\r\n-      map(value => this._filter1(value || '')),\r\n+      map((value) => this._filter1(value || ''))\r\n     );\r\n   }\r\n \r\n   private _filter(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n+    return this.options.filter((option) =>\r\n+      option.toLowerCase().includes(filterValue)\r\n+    );\r\n   }\r\n \r\n-    private _filter1(value: string): string[] {\r\n+  private _filter1(value: string): string[] {\r\n     const filterValue = value.toLowerCase();\r\n \r\n-    return this.colors.filter(option => option.toLowerCase().includes(filterValue));\r\n+    return this.colors.filter((option) =>\r\n+      option.toLowerCase().includes(filterValue)\r\n+    );\r\n   }\r\n \r\n   uploadFile(event: any) {\r\n     let reader = new FileReader(); // HTML5 FileReader API\r\n@@ -137,33 +184,32 @@\n       // When file uploads set it to file formcontrol\r\n       reader.onload = () => {\r\n         this.imageUrl = reader.result;\r\n         this.registrationForm.patchValue({\r\n-          file: reader.result\r\n+          file: reader.result,\r\n         });\r\n         this.editFile = false;\r\n         this.removeUpload = true;\r\n-      }\r\n+      };\r\n       // ChangeDetectorRef since file is loading outside the zone\r\n       this.cd.markForCheck();\r\n     }\r\n   }\r\n \r\n-\r\n-   add(event: MatChipInputEvent): void {\r\n+  add(event: MatChipInputEvent): void {\r\n     const value = (event.value || '').trim();\r\n \r\n     // Add our fruit\r\n     if (value) {\r\n-      this.fruits.update(fruits => [...fruits, {name: value}]);\r\n+      this.fruits.update((fruits) => [...fruits, { name: value }]);\r\n     }\r\n \r\n     // Clear the input value\r\n     event.chipInput!.clear();\r\n   }\r\n \r\n   remove(fruit: Fruit): void {\r\n-    this.fruits.update(fruits => {\r\n+    this.fruits.update((fruits) => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index < 0) {\r\n         return fruits;\r\n       }\r\n@@ -183,9 +229,9 @@\n       return;\r\n     }\r\n \r\n     // Edit existing fruit\r\n-    this.fruits.update(fruits => {\r\n+    this.fruits.update((fruits) => {\r\n       const index = fruits.indexOf(fruit);\r\n       if (index >= 0) {\r\n         fruits[index].name = value;\r\n         return [...fruits];\r\n@@ -193,17 +239,15 @@\n       return fruits;\r\n     });\r\n   }\r\n \r\n+  jsonTest() {\r\n+    if (this.productForm.valid) {\r\n+      const formData = this.productForm.value;\r\n \r\n-  jsonTest(){\r\n-        if (this.productForm.valid) {\r\n-          const  formData = this.productForm.value\r\n-\r\n-          formData.sale = true\r\n+      formData.sale = true;\r\n       console.log('Form Data:', this.productForm.value);\r\n     } else {\r\n       this.productForm.markAllAsTouched();\r\n     }\r\n   }\r\n-  }\r\n-\r\n+}\r\n"
                },
                {
                    "date": 1750001536865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,100 +147,12 @@\n     { key: 'Marijuana', value: 'marijuana' },\r\n   ];\r\n \r\n   ngOnInit() {\r\n-    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n-      startWith(''),\r\n-      map((value) => this._filter(value || ''))\r\n-    );\r\n \r\n-    this.filteredColors = this.myControl1.valueChanges.pipe(\r\n-      startWith(''),\r\n-      map((value) => this._filter1(value || ''))\r\n-    );\r\n   }\r\n \r\n-  private _filter(value: string): string[] {\r\n-    const filterValue = value.toLowerCase();\r\n \r\n-    return this.options.filter((option) =>\r\n-      option.toLowerCase().includes(filterValue)\r\n-    );\r\n-  }\r\n-\r\n-  private _filter1(value: string): string[] {\r\n-    const filterValue = value.toLowerCase();\r\n-\r\n-    return this.colors.filter((option) =>\r\n-      option.toLowerCase().includes(filterValue)\r\n-    );\r\n-  }\r\n-\r\n-  uploadFile(event: any) {\r\n-    let reader = new FileReader(); // HTML5 FileReader API\r\n-    let file = event.target.files[0];\r\n-    if (event.target.files && event.target.files[0]) {\r\n-      reader.readAsDataURL(file);\r\n-\r\n-      // When file uploads set it to file formcontrol\r\n-      reader.onload = () => {\r\n-        this.imageUrl = reader.result;\r\n-        this.registrationForm.patchValue({\r\n-          file: reader.result,\r\n-        });\r\n-        this.editFile = false;\r\n-        this.removeUpload = true;\r\n-      };\r\n-      // ChangeDetectorRef since file is loading outside the zone\r\n-      this.cd.markForCheck();\r\n-    }\r\n-  }\r\n-\r\n-  add(event: MatChipInputEvent): void {\r\n-    const value = (event.value || '').trim();\r\n-\r\n-    // Add our fruit\r\n-    if (value) {\r\n-      this.fruits.update((fruits) => [...fruits, { name: value }]);\r\n-    }\r\n-\r\n-    // Clear the input value\r\n-    event.chipInput!.clear();\r\n-  }\r\n-\r\n-  remove(fruit: Fruit): void {\r\n-    this.fruits.update((fruits) => {\r\n-      const index = fruits.indexOf(fruit);\r\n-      if (index < 0) {\r\n-        return fruits;\r\n-      }\r\n-\r\n-      fruits.splice(index, 1);\r\n-      this.announcer.announce(`Removed ${fruit.name}`);\r\n-      return [...fruits];\r\n-    });\r\n-  }\r\n-\r\n-  edit(fruit: Fruit, event: MatChipEditedEvent) {\r\n-    const value = event.value.trim();\r\n-\r\n-    // Remove fruit if it no longer has a name\r\n-    if (!value) {\r\n-      this.remove(fruit);\r\n-      return;\r\n-    }\r\n-\r\n-    // Edit existing fruit\r\n-    this.fruits.update((fruits) => {\r\n-      const index = fruits.indexOf(fruit);\r\n-      if (index >= 0) {\r\n-        fruits[index].name = value;\r\n-        return [...fruits];\r\n-      }\r\n-      return fruits;\r\n-    });\r\n-  }\r\n-\r\n   jsonTest() {\r\n     if (this.productForm.valid) {\r\n       const formData = this.productForm.value;\r\n \r\n"
                },
                {
                    "date": 1750001636762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,29 +57,18 @@\n   templateUrl: './add-product.component.html',\r\n   styleUrl: './add-product.component.scss',\r\n })\r\n export class AddProductComponent {\r\n-  @ViewChild('fileInput') el!: ElementRef;\r\n   imageUrl: any = [\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n     '../../../assts/add-img.webp',\r\n   ];\r\n-  registrationForm!: FormGroup;\r\n-  editFile: boolean = true;\r\n-  removeUpload: boolean = false;\r\n-  readonly addOnBlur = true;\r\n-  readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n-  readonly fruits = signal<any[]>([\r\n-    { name: 'Lemon' },\r\n-    { name: 'Lime' },\r\n-    { name: 'Apple' },\r\n-  ]);\r\n-  readonly announcer = inject(LiveAnnouncer);\r\n+\r\n+\r\n   productForm!: FormGroup;\r\n-  myControl = new FormControl('');\r\n-  myControl1 = new FormControl('');\r\n+\r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n   filteredOptions!: Observable<string[]>;\r\n   filteredColors!: Observable<string[]>;\r\n"
                },
                {
                    "date": 1750001679492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n   imports: [\r\n     MatFormFieldModule,\r\n     MatButtonModule,\r\n     MatInputModule,\r\n-    AsyncPipe,\r\n     MatAutocompleteModule,\r\n     MatInputModule,\r\n     MatIconModule,\r\n     MatChipsModule,\r\n"
                },
                {
                    "date": 1750001826981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,16 +64,14 @@\n     '../../../assts/add-img.webp',\r\n   ];\r\n \r\n \r\n-  productForm!: FormGroup;\r\n+  productForm1!: FormGroup;\r\n \r\n   options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n   colors: string[] = ['yellow', 'white', 'pink', 'olive', 'navy', 'red'];\r\n-  filteredOptions!: Observable<string[]>;\r\n-  filteredColors!: Observable<string[]>;\r\n   constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) {\r\n-    this.productForm = this.fb.group({\r\n+    this.productForm1 = this.fb.group({\r\n       title: ['', Validators.required],\r\n       description: [''],\r\n       type: [''],\r\n       brand: [''],\r\n@@ -140,14 +138,14 @@\n   }\r\n \r\n \r\n   jsonTest() {\r\n-    if (this.productForm.valid) {\r\n-      const formData = this.productForm.value;\r\n+    if (this.productForm1.valid) {\r\n+      const formData = this.productForm1.value;\r\n \r\n       formData.sale = true;\r\n-      console.log('Form Data:', this.productForm.value);\r\n+      console.log('Form Data:', this.productForm1.value);\r\n     } else {\r\n-      this.productForm.markAllAsTouched();\r\n+      this.productForm1.markAllAsTouched();\r\n     }\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1749782917810,
            "name": "Commit-0",
            "content": "import { ChangeDetectorRef, Component, ElementRef, inject, signal, ViewChild } from '@angular/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon'\r\nimport { NgFor } from '@angular/common';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport {MatChipEditedEvent, MatChipInputEvent, MatChipsModule} from '@angular/material/chips';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {AsyncPipe} from '@angular/common';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nexport interface Fruit {\r\n  name: string;\r\n}\r\n@Component({\r\n  selector: 'app-add-product',\r\n  standalone: true,\r\n  imports: [MatFormFieldModule, MatInputModule, AsyncPipe, MatAutocompleteModule, MatInputModule, MatIconModule, MatChipsModule, MatIconModule, MatSelectModule, NgFor, MatExpansionModule, ReactiveFormsModule],\r\n  templateUrl: './add-product.component.html',\r\n  styleUrl: './add-product.component.scss'\r\n})\r\nexport class AddProductComponent {\r\n  @ViewChild('fileInput') el!: ElementRef;\r\n  imageUrl: any = [\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\",\"../../../assts/add-img.webp\"];\r\n  registrationForm!: FormGroup\r\n  editFile: boolean = true;\r\n  removeUpload: boolean = false;\r\n    readonly addOnBlur = true;\r\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n  readonly fruits = signal<any[]>([{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}]);\r\n  readonly announcer = inject(LiveAnnouncer);\r\n  productForm!: FormGroup;\r\n    myControl = new FormControl('');\r\n        myControl1 = new FormControl('');\r\n  options: string[] = ['s', 'm', 'l', 'xl', 'xxl'];\r\n  colors: string[] = ['yellow','white','pink','olive','navy','red']\r\n  filteredOptions!: Observable<string[]>;\r\n  filteredColors!: Observable<string[]>;\r\n  constructor(private fb: FormBuilder, private cd: ChangeDetectorRef) {\r\nthis.productForm = this.fb.group({\r\n      title: ['', Validators.required],\r\n      description: [''],\r\n      type: [''],\r\n      brand: [''],\r\n      collection: [[]],\r\n      category: [''],\r\n      price: [''],\r\n      discount: [''],\r\n      stock: [''],\r\n      newProduct: [false]\r\n    });\r\n  }\r\n\r\n  typeArray = [\r\n    { key: 'Fashion', value: 'fashion' },\r\n    { key: 'Shoes', value: 'shoes' },\r\n    { key: 'Bags', value: 'bags' },\r\n    { key: 'Watch', value: 'watch' },\r\n    { key: 'Flower', value: 'flower' },\r\n    { key: 'Pets', value: 'pets' },\r\n    { key: 'Electronics', value: 'electronics' },\r\n    { key: 'Vegetables', value: 'vegetables' },\r\n    { key: 'Furniture', value: 'furniture' },\r\n    { key: 'Beauty', value: 'beauty' },\r\n    { key: 'Tools', value: 'tools' },\r\n    { key: 'Gym', value: 'gym' },\r\n    { key: 'Marijuana', value: 'marijuana' },\r\n  ]\r\n\r\n  brandArray = [\r\n    { key: 'Nike', value: 'nike' },\r\n    { key: 'Zara', value: 'zara' },\r\n    { key: 'Denim', value: 'denim' },\r\n    { key: 'Madame', value: 'madame' },\r\n    { key: 'Biba', value: 'biba' },\r\n    { key: 'Max', value: 'max' },\r\n  ]\r\n\r\n  collectionArray = [\r\n    { key: 'New products', value: 'new products' },\r\n    { key: 'Best sellers', value: 'best sellers' },\r\n    { key: 'Featured products', value: 'featured products' },\r\n    { key: 'On sale', value: 'on sale' },\r\n    { key: 'New arrival', value: 'new arrival' },\r\n    { key: 'Trending product', value: 'trending product' },\r\n  ]\r\n  categoryArray = [\r\n    { key: 'Fashion', value: 'Women' },\r\n    { key: 'Shoes', value: 'shoes' },\r\n    { key: 'Bags', value: 'bags' },\r\n    { key: 'Watch', value: 'watch' },\r\n    { key: 'Flower', value: 'flower' },\r\n    { key: 'Pets', value: 'pets' },\r\n    { key: 'Electronics', value: 'electronics' },\r\n    { key: 'Vegetables', value: 'vegetables' },\r\n    { key: 'Furniture', value: 'furniture' },\r\n    { key: 'Beauty', value: 'beauty' },\r\n    { key: 'Tools', value: 'tools' },\r\n    { key: 'Gym', value: 'gym' },\r\n    { key: 'Marijuana', value: 'marijuana' },\r\n  ]\r\n\r\n    ngOnInit() {\r\n    this.filteredOptions = this.myControl.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter(value || '')),\r\n    );\r\n\r\n        this.filteredColors = this.myControl1.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter1(value || '')),\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n    private _filter1(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.colors.filter(option => option.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  uploadFile(event: any) {\r\n    let reader = new FileReader(); // HTML5 FileReader API\r\n    let file = event.target.files[0];\r\n    if (event.target.files && event.target.files[0]) {\r\n      reader.readAsDataURL(file);\r\n\r\n      // When file uploads set it to file formcontrol\r\n      reader.onload = () => {\r\n        this.imageUrl = reader.result;\r\n        this.registrationForm.patchValue({\r\n          file: reader.result\r\n        });\r\n        this.editFile = false;\r\n        this.removeUpload = true;\r\n      }\r\n      // ChangeDetectorRef since file is loading outside the zone\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n\r\n   add(event: MatChipInputEvent): void {\r\n    const value = (event.value || '').trim();\r\n\r\n    // Add our fruit\r\n    if (value) {\r\n      this.fruits.update(fruits => [...fruits, {name: value}]);\r\n    }\r\n\r\n    // Clear the input value\r\n    event.chipInput!.clear();\r\n  }\r\n\r\n  remove(fruit: Fruit): void {\r\n    this.fruits.update(fruits => {\r\n      const index = fruits.indexOf(fruit);\r\n      if (index < 0) {\r\n        return fruits;\r\n      }\r\n\r\n      fruits.splice(index, 1);\r\n      this.announcer.announce(`Removed ${fruit.name}`);\r\n      return [...fruits];\r\n    });\r\n  }\r\n\r\n  edit(fruit: Fruit, event: MatChipEditedEvent) {\r\n    const value = event.value.trim();\r\n\r\n    // Remove fruit if it no longer has a name\r\n    if (!value) {\r\n      this.remove(fruit);\r\n      return;\r\n    }\r\n\r\n    // Edit existing fruit\r\n    this.fruits.update(fruits => {\r\n      const index = fruits.indexOf(fruit);\r\n      if (index >= 0) {\r\n        fruits[index].name = value;\r\n        return [...fruits];\r\n      }\r\n      return fruits;\r\n    });\r\n  }\r\n\r\n\r\n  jsonTest(){\r\n    \r\n  }\r\n}\r\n"
        }
    ]
}